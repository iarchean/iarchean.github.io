<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Archean's Blog]]></title>
  <subtitle><![CDATA[Knowing and Doing.]]></subtitle>
  <link href="http://blog.archean.me/atom.xml" rel="self"/>
  <link href="http://blog.archean.me"/>
  <updated>2013-10-24T06:42:14.856Z</updated>
  <id>http://blog.archean.me/</id>
  <author>
    <name><![CDATA[Archean Zhang]]></name>
    <email><![CDATA[zephyr422@gmail.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[Os X Mavericks: the Review]]></title>
    <link href="http://blog.archean.me/2013/10/24/OS-X-Mavericks-The-Review/"/>
    <id>http://blog.archean.me/2013/10/24/OS-X-Mavericks-The-Review/</id>
    <published>2013-10-24T06:03:30.000Z</published>
    <updated>2013-10-24T06:12:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://img.archean.me/Mavericks.jpg" alt="OS X Mavericks"><br>OS X Mavericks 发布已有两天了, 最大的惊喜是免费升级, 并且 iWorks 系列都免费了 (仅限今年的新购机器).</p>
<p>我第一时间就下载安装了起来, 改进还是蛮大的, 特别是电源管理和多显示器支持的优化.</p>
<p>奉上一篇 Review, 比较客观的介绍了新系统的各项特性, Hope you enjoy!</p>
]]></content>
    <category scheme="http://blog.archean.me/tags/Apple/" term="Apple"/>
    <category scheme="http://blog.archean.me/tags/Mac/" term="Mac"/>
    <category scheme="http://blog.archean.me/tags/OS X/" term="OS X"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[the Great Gatsby]]></title>
    <link href="http://blog.archean.me/2013/10/22/the-great-gatsby/"/>
    <id>http://blog.archean.me/2013/10/22/the-great-gatsby/</id>
    <published>2013-10-22T15:51:02.000Z</published>
    <updated>2013-10-22T16:01:47.000Z</updated>
    <content type="html"><![CDATA[<h3>Young And Beautiful</h3>
<blockquote>
<p>I&#39;ve seen the world<br>Done it all<br>Had my cake now<br>Diamonds, brilliant<br>And Bel Air now<br>Hot summer nights, mid July<br>When you and I were forever wild<br>The crazy days, city lights<br>The way you&#39;d play with me like a child</p>
<p>Will you still love me<br>When I&#39;m no longer young and beautiful?</p>
</blockquote>
<p>刚刚陪老婆看了<a href="http://movie.douban.com/subject/3364223/" target="_blank">the Great Gatsby</a>, 有感于莱昂纳多精湛的演绎, 电影绝美的画面以及这个凄美的梦.</p>
]]></content>
    <category scheme="http://blog.archean.me/tags/movie/" term="movie"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Ubuntu Server 下安装 Mcrypt Php Extension]]></title>
    <link href="http://blog.archean.me/2013/10/22/install-mcrypt-php-extension-on-ubuntu-server/"/>
    <id>http://blog.archean.me/2013/10/22/install-mcrypt-php-extension-on-ubuntu-server/</id>
    <published>2013-10-22T15:41:37.000Z</published>
    <updated>2013-10-24T02:22:39.000Z</updated>
    <content type="html"><![CDATA[<p>Laravel4 框架需要 PHP 5.4 以上及 Mcrypt PHP extension, 折腾了半天, 记录下备忘.</p>
<p>安装 Mcrypt 包, 顺便安装 php 开发环境</p>
<pre><code>$ su<span class="operator"><span class="keyword">do</span> apt-<span class="keyword">get</span> install php5-mcrypt php5-dev</code></pre>
<p>将配置文件链接给 PHP</p>
<pre><code>$ su<span class="operator"><span class="keyword">do</span> ln -s /etc/php5/conf.d/mcrypt.ini /etc/php5/mods-available</code></pre>
<p>开启 Mcrypt 模块</p>
<pre><code>$ su<span class="operator"><span class="keyword">do</span> php5enmod mcrypt</code></pre>
<p>重启 Nginx</p>
<pre><code>$ su<span class="operator"><span class="keyword">do</span> /etc/init.d/nginx restart</code></pre>
<p>此时重新执行<code>php artisan</code>, all is well.</p>
<p>Hope can help you.</p>
<p><em>Oct, 24 update:</em></p>
<p>后来知道这是 Ununtu 13.10 的一个<a href="https://bugs.launchpad.net/ubuntu/+source/php-mcrypt/+bug/1241286" target="_blank">Bug</a>, 按如上操作完成后重启一次 php5-fpm 即可彻底解决.</p>
]]></content>
    <category scheme="http://blog.archean.me/tags/web/" term="web"/>
    <category scheme="http://blog.archean.me/tags/php/" term="php"/>
    <category scheme="http://blog.archean.me/tags/memo/" term="memo"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[用 Dropbox Public Folder 做博客的超稳定图床]]></title>
    <link href="http://blog.archean.me/2013/10/21/make-dropbox-public-folder-a-stable-pic-server/"/>
    <id>http://blog.archean.me/2013/10/21/make-dropbox-public-folder-a-stable-pic-server/</id>
    <published>2013-10-21T15:52:35.000Z</published>
    <updated>2013-10-21T16:18:50.000Z</updated>
    <content type="html"><![CDATA[<p>这个 Blog 是搭建在<a href="https://www.digitalocean.com/?refcode=87b0301d5ece" target="_blank">Digital Ocean</a>上的, 这个 VPS 还是很不错的, 加州的节点在天朝访问速度非常可以, 拥有 20G SSD 磁盘和每月 1T 的流量, 只需 5$, 还是非常超值的.</p>
<p>但是即便如此, Blog 需要的大量图片等元素还是非常占用空间的, 所以只好想办法寻找一个稳定的图床来存. 我一直是 Dropbox 的重度用户, 自然想到她的 Public Folder. </p>
<blockquote>
<p>Dropbox 每日限制流量 20G, <a href="https://www.dropbox.com/help/45/en" target="_blank">来源</a></p>
</blockquote>
<p>Dropbox Public Folder 的地址是<a href="https://dl.dropboxusercontent/u/idxxxxxxxx/" target="_blank">https://dl.dropboxusercontent/u/idxxxxxxxx/</a>, Blog 引用起来不够优雅, 于是萌生了此文.</p>
<p>配置起来非常简单, 经过我的反复实践, Nginx vhost 最小配置为:</p>
<pre><code><span class="title">server</span> {

    <span class="title">listen</span> <span class="number">80</span>;
    <span class="title">server_name</span> img.archean.me;
    <span class="title">root</span> /path/to/www/root; <span class="comment"># 也可省略</span>

    <span class="title">location</span> / {
        <span class="title">rewrite</span> /(.*) /u/DropboxID/img/<span class="variable">$1</span> <span class="built_in">break</span>;
        <span class="title">proxy_pass</span> <span class="url">https://dl.dropboxusercontent.com/;</span>
    }
}</code></pre>
<p>此配置足以使用, 最终效果是当我访问<a href="http://img.archean.me/1.jpg" target="_blank">http://img.archean.me/1.jpg</a> 时, 可以显示<a href="https://dl.dropboxusercontent.com/u/19060928/img/1.jpg" target="_blank">https://dl.dropboxusercontent.com/u/19060928/img/1.jpg</a> 的图片<br><img src="http://img.archean.me/Dropbox-pic-server.png" alt=""></p>
]]></content>
    <category scheme="http://blog.archean.me/tags/dropbox/" term="dropbox"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[搞定 Hexo]]></title>
    <link href="http://blog.archean.me/2013/10/20/fulfil-with-hexo-theme/"/>
    <id>http://blog.archean.me/2013/10/20/fulfil-with-hexo-theme/</id>
    <published>2013-10-20T15:05:05.000Z</published>
    <updated>2013-10-20T15:07:28.000Z</updated>
    <content type="html"><![CDATA[<p>经过几天的摸索, 实践, 初步搞定了 Hexo, 也自己试着修改了一个主题, 折腾真的是无止境的.</p>
<p>回头静下心来的时候把这段时间折腾的成果整理一下, 算是对学习的总结.</p>
]]></content>
    <category scheme="http://blog.archean.me/tags/web/" term="web"/>
    <category scheme="http://blog.archean.me/tags/hexo/" term="hexo"/>
    <category scheme="http://blog.archean.me/tags/theme/" term="theme"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[命令行电台 - Cmd.fm]]></title>
    <link href="http://blog.archean.me/2013/10/19/Command-line-fm/"/>
    <id>http://blog.archean.me/2013/10/19/Command-line-fm/</id>
    <published>2013-10-19T12:25:14.000Z</published>
    <updated>2013-10-20T15:23:26.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/cmd.fm.png" alt="Cmd.fm"><br>Cmd.fm, 正如其名, 是一个给 geek 编写的音频播放器. </p>
<p>进度条是用多个 # 号表示 (“#### ”). 输入 help , 可获取帮助信息. </p>
<p>输入 genre list, 可获取歌曲流派 (genre) 信息. </p>
<p>这个 Web 应用的作者是 25 岁的 Emir Alp, 现居伊斯坦布尔.</p>
]]></content>
    <category scheme="http://blog.archean.me/tags/music/" term="music"/>
    <category scheme="http://blog.archean.me/tags/geek/" term="geek"/>
    <category scheme="http://blog.archean.me/tags/web/" term="web"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Test]]></title>
    <link href="http://blog.archean.me/2013/10/19/test/"/>
    <id>http://blog.archean.me/2013/10/19/test/</id>
    <published>2013-10-19T05:15:56.000Z</published>
    <updated>2013-10-23T16:52:40.000Z</updated>
    <content type="html"><![CDATA[<p>下面是一条 Gist</p>
<p>显示有问题, 正在改进.</p>
<script src="https://gist.github.com/laurentsab/7081189.js"></script>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[使用一台raspberry Pi作为家庭网关, 无障碍翻墙]]></title>
    <link href="http://blog.archean.me/2013/10/16/breaking-gfw-with-raspberry-pi/"/>
    <id>http://blog.archean.me/2013/10/16/breaking-gfw-with-raspberry-pi/</id>
    <published>2013-10-16T13:57:37.000Z</published>
    <updated>2013-10-18T14:18:23.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Arthor:    Archean Zhang</p>
<p>Email:    zephyr422@gmail.com</p>
<p>Version:    1.0.1</p>
<p>Date:        2013/8/16</p>
</blockquote>
<p>长期被 GFW 困扰, 我终于忍不住动手了: 把家里的 Raspberry Pi 和与自由世界的主机建立 OpenVPN over Stunnel 的链路, 根据大中华 3000 条路由来匹配, 国外网站自动走 OpenVPN 出去以实现翻墙.</p>
<p>以下文章是基于一台 Linux 服务器 (CentOS 6.4) 撰写的, 将下面<code>Router</code>的换成 Raspberry Pi 也一样.<br><a id="more"></a></p>
<h2><code>1</code>.    准备</h2>
<p>硬件:</p>
<ul>
<li>1 台位于自由世界的 Linux 服务器 (Server)</li>
<li>1 台位于本地的 Linux 服务器 (Router)</li>
<li>客户端 (Client)</li>
</ul>
<p>软件:</p>
<ul>
<li>Stunnel</li>
<li>OpenVPN</li>
<li>DNSMasq</li>
</ul>
<p>拓扑图:<br><img src="http://archean.me/img/OpenVPN.png" alt="Topology"></p>
<h2><code>2</code>.    Server 端配置</h2>
<p>安装好 Linux 系统后 (Red hat 或 CentOS), 同步服务器时间 (非常重要):</p>
<pre><code><span class="preprocessor"># ntpdate time.nist.gov</span></code></pre>
<h3><code>2.1</code>    OpenVPN</h3>
<p>下载安装 OpenVPN, 生成服务器端证书, OpenVPN 依赖 lzo, 需要一同安装:</p>
<pre><code><span class="preprocessor"># yum install lzo openvpn</span></code></pre>
<p>服务器端配置文件<code>/etc/openvpn/server.conf</code>, 范例及说明如下:</p>
<pre><code><span class="title">local</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>     # 监听本地接口
<span class="title">port</span> <span class="number">4443</span>             # 监听端口
<span class="title">proto</span> tcp             # 协议
<span class="title">dev</span> tap                
<span class="title">ca</span> /etc/openvpn/keys/ca.crt            # 证书
<span class="title">cert</span> /etc/openvpn/keys/server.crt    # 证书
<span class="title">dh</span> /etc/openvpn/keys/dh1024.pem        # 证书
<span class="title">server</span> <span class="number">172.31</span><span class="number">.189</span><span class="number">.0</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>    # 网段
<span class="title">client</span>-to-client
<span class="title">duplicate</span>-cn
<span class="title">keepalive</span> <span class="number">10</span> <span class="number">120</span>
<span class="title">comp</span>-lzo
<span class="title">persist</span>-key
<span class="title">persist</span>-tun
<span class="title">status</span> openvpn-status.log        # 状态日志
<span class="title">log</span>-append  openvpn.log            # 执行日志
<span class="title">verb</span> <span class="number">3</span></code></pre>
<p>启动 openvpn:</p>
<pre><code><span class="comment">#</span> <span class="comment">openvpn</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">config</span> <span class="comment">/etc/openvpn/server</span>.<span class="comment">conf</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">deamon</code></pre>
<p>观察日志, 如果出现<code>“Initialization Sequence Completed”</code>则代表启动成功.</p>
<h3><code>2.2</code>    Stunnel</h3>
<p>Openvpn 的 Server 端只监控本地接口, 就是为了用 Stunnel 将流量加密, 在 Local 端安全的链接, 达到加密, 混淆流量的作用, 以绕开 GFW 的监控.</p>
<p>下载安装 stunnel</p>
<pre><code><span class="preprocessor"># yum install stunnel</span></code></pre>
<p>安装过程中会生成服务器证书<code>stunnel.pem</code>, 按照提示来即可.</p>
<p>编辑配置文件<code>/usr/bin/etc/stunnel.conf</code>, 如下所示:<br>    cert = /usr/local/etc/stunnel/stunnel.pem<br>    CAfile = /usr/local/etc/stunnel/stunnel.pem<br>    socket = l:TCP_NODELAY=1<br>    socket = r:TCP_NODELAY=1</p>
<pre><code><span class="setting">pid = <span class="value">/tmp/stunnel.pid</span></span>
<span class="setting">verify = <span class="value"><span class="number">3</span></span></span>

<span class="setting">setuid = <span class="value">stunnel</span></span>
<span class="setting">setgid = <span class="value">stunnel</span></span>

<span class="setting">compression = <span class="value">zlib</span></span>
<span class="setting">delay = <span class="value"><span class="keyword">no</span></span></span>
<span class="setting">sslVersion = <span class="value">TLSv1</span></span>
<span class="setting">fips=<span class="value"><span class="keyword">no</span></span></span>

<span class="setting">debug = <span class="value"><span class="number">7</span></span></span>
<span class="setting">syslog = <span class="value"><span class="keyword">no</span></span></span>
<span class="setting">output = <span class="value">/usr/local/etc/stunnel/stunnel.log</span></span>

<span class="title">[s-openvpn]</span>    
<span class="setting">accept = <span class="value"><span class="number">13579</span>                # 监听端口</span></span>
<span class="setting">connect = <span class="value"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">4443</span>    #OpenVPN 端口</span></span></code></pre>
<p>启动 stunnel:</p>
<pre><code><span class="preprocessor"># stunnel</span></code></pre>
<p>查看 OpenVPN 和 Stunnel 是否正确执行, 检查相应端口:</p>
<pre><code><span class="comment"># netstat -ntwla</span>
<span class="title">Active</span> Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address               Foreign Address             State      
tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0.0.0:13579</span>               <span class="number">0.0.0.0</span>:*                   LISTEN    
tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0.0.1:4443</span>              <span class="number">127.0.0.1:50223</span>             ESTABLISHED 
<span class="comment"># lsof -i:4443 -n</span>
COMMAND   PID    USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
openvpn <span class="number">25290</span>    root    5u  IPv4 <span class="number">2982393</span>      0t0  TCP *:pharos (LISTEN)
openvpn <span class="number">25290</span>    root    8u  IPv4 <span class="number">3361561</span>      0t0  TCP <span class="number">127.0.0.1</span>:pharos-&gt;<span class="number">127.0.0.1:50223</span> (ESTABLISHED)
stunnel <span class="number">26801</span> stunnel   10u  IPv4 <span class="number">3361560</span>      0t0  TCP <span class="number">127.0.0.1:50223</span>-&gt;<span class="number">127.0.0.1</span>:pharos (ESTABLISHED)</code></pre>
<p><strong>看到端口均已正确监听, 至此 Server 端配置完成</strong></p>
<h2><code>3</code>.    Router 配置</h2>
<p>安装好 Linux 系统后 (Red hat 或 CentOS), 同步服务器时间 (非常重要):</p>
<pre><code><span class="preprocessor"># ntpdate time.nist.gov</span></code></pre>
<h3><code>3.1</code>    安装 Stunnel</h3>
<p>Router 端需要首先安装 Stunnel, 在本地开启加密链路, 透传 OpenVPN 加密端口 4443, 然后 OpenVPN 才能开始接入:</p>
<pre><code><span class="preprocessor"># yum install stunnel</span></code></pre>
<p>将 Server 端 Stunnel 证书传过来, 以便验证:</p>
<pre><code><span class="comment"># scp root<span class="yardoctag">@server</span>:/usr/local/etc/stunnel.pem root<span class="yardoctag">@router</span>:/usr/local/etc/stunnel.pem</span></code></pre>
<p>开始进行 stunnel 配置, 配置文件<code>/usr/local/etc/stunnel.conf</code>:</p>
<pre><code><span class="setting">pid = <span class="value">/tmp/stunnel.pid</span></span>
<span class="setting">cert = <span class="value">/usr/local/etc/stunnel/stunnel.pem</span></span>
<span class="setting">socket = <span class="value">l:TCP_NODELAY=<span class="number">1</span></span></span>
<span class="setting">socket = <span class="value">r:TCP_NODELAY=<span class="number">1</span></span></span>
<span class="setting">verify = <span class="value"><span class="number">3</span></span></span>
<span class="setting">CAfile = <span class="value">/usr/local/etc/stunnel/stunnel.pem</span></span>
<span class="setting">client=<span class="value"><span class="keyword">yes</span></span></span>
<span class="setting">compression = <span class="value">zlib</span></span>
<span class="setting">ciphers = <span class="value">AES256-SHA</span></span>
<span class="setting">delay = <span class="value"><span class="keyword">no</span></span></span>
<span class="setting">failover = <span class="value">prio</span></span>
<span class="setting">sslVersion = <span class="value">TLSv1</span></span>

<span class="setting">output = <span class="value">/root/bin/logs/stunnel.log</span></span>
<span class="title">[s-openvpn]</span>
<span class="setting">accept = <span class="value"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">4443</span></span></span>
<span class="setting">connect = <span class="value">server.ip.address:<span class="number">13579</span></span></span></code></pre>
<p>启动 stunnel:</p>
<pre><code><span class="preprocessor"># stunnel</span></code></pre>
<h3><code>3.2</code>    安装 OpenVPN</h3>
<p>下载安装 OpenVPN, OpenVPN 依赖 lzo, 需要一同安装:</p>
<pre><code><span class="preprocessor"># yum install lzo openvpn</span></code></pre>
<p>配置 Router 端配置文件<code>/etc/openvpn/hk.ovpn</code>:<br>    dev tap                # 设备模式<br>    port 65530            # 本地监听端口<br>    proto tcp            # 协议<br>    client                # 服务模式:client<br>    tls-client            # 加密客户端<br>    ns-cert-type server<br>    remote 127.0.0.1 4443                #Server 端口, 由于使用 Stunnel 加密透传, 所以连接本地端口<br>    ca /etc/openvpn/ca/ca.crt            # 证书<br>    key /etc/openvpn/ca/client1.key        # 证书<br>    cert /etc/openvpn/ca/client1.crt    # 证书<br>    persist-key<br>    persist-tun</p>
<pre><code><span class="preprocessor">#route-method exe</span>
<span class="preprocessor">#route-delay 2</span>
<span class="built_in">comp</span>-lzo
status /etc/openvpn/openvpn-status.<span class="built_in">log</span>        <span class="preprocessor"># 状态日志</span>
<span class="built_in">log</span>-append  /etc/openvpn/ca.<span class="built_in">log</span>                <span class="preprocessor"># 执行日志</span>
verb <span class="number">3</span></code></pre>
<p>启动 OpenVPN:</p>
<pre><code><span class="comment">#</span> <span class="comment">openvpn</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">daemon</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">config</span> <span class="comment">/etc/openvpn/hk</span>.<span class="comment">ovpn</code></pre>
<p>观察日志, 如果出现<code>“Initialization Sequence Completed”</code>则代表启动成功.</p>
<p>检查隧道:</p>
<pre><code># ip addr
<span class="number">11</span>: <span class="method">tap0:</span> &lt;<span class="class">BROADCAST</span>,<span class="class">MULTICAST</span>,<span class="class">UP</span>,<span class="class">LOWER_UP</span>&gt; mtu <span class="number">1500</span> qdisc pfifo_fast state <span class="class">UNKNOWN</span> qlen <span class="number">100</span>
    link/ether <span class="number">06</span>:<span class="number">10</span>:<span class="number">50</span>:<span class="method">e5:</span><span class="method">e5:</span><span class="number">2</span>c brd <span class="method">ff:</span><span class="method">ff:</span><span class="method">ff:</span><span class="method">ff:</span><span class="method">ff:</span>ff
    inet <span class="number">172.31</span><span class="number">.188</span><span class="number">.2</span>/<span class="number">24</span> brd <span class="number">172.31</span><span class="number">.188</span><span class="number">.255</span> scope global tap0
    inet6 <span class="method">fe80:</span>:<span class="number">410</span>:<span class="number">50</span><span class="method">ff:</span><span class="method">fee5:</span>e52c/<span class="number">64</span> scope link 
       valid_lft forever preferred_lft forever

# ping <span class="number">172.31</span><span class="number">.188</span><span class="number">.1</span>
<span class="class">PING</span> <span class="number">172.31</span><span class="number">.188</span><span class="number">.1</span> (<span class="number">172.31</span><span class="number">.188</span><span class="number">.1</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.
<span class="number">64</span> bytes from <span class="number">172.31</span><span class="number">.188</span><span class="number">.1</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">67.3</span> ms
<span class="number">64</span> bytes from <span class="number">172.31</span><span class="number">.188</span><span class="number">.1</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">67.1</span> ms
^<span class="class">C</span>
--- <span class="number">172.31</span><span class="number">.188</span><span class="number">.1</span> ping statistics ---
<span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">1588</span>ms
rtt min/avg/max/mdev = <span class="number">67.183</span>/<span class="number">67.284</span>/<span class="number">67.386</span>/<span class="number">0.278</span> ms</code></pre>
<p>链路通畅</p>
<h3><code>3.3</code>    安装 DNSmasq</h3>
<p>Router 若要进行翻墙, 需要使用国外 DNS, 而浏览国内网站时, 如果使用国外 DNS, 会造成将访问导向国外站点, 造成访问速度变慢, 所以此方案使用 DNSmasq 解决此问题.</p>
<p>同时 DNSmasq 也是一个轻量级 DHCP 服务器, 非常方便好用.</p>
<p>安装 DNSmasq:</p>
<pre><code><span class="preprocessor"># yum install dnsmasq</span></code></pre>
<p>编辑 DNSmasq 配置文件<code>/etc/dnsmasq.conf</code>, 假设 Router 本地 IP 是 10.2.166.10, 本地分发网段是 10.2.166.0/24, 则配置如下:</p>
<pre><code><span class="comment"># DHCP config</span>
expand-hosts
domain=localdomain.com
<span class="comment"># DHCP Range</span>
dhcp-range=<span class="number">10.2</span>.<span class="number">166.50</span>,<span class="number">10.2</span>.<span class="number">166.150</span>,<span class="number">12</span>h    <span class="comment">#DHCP 地址池</span>
<span class="comment"># DHCP route</span>
dhcp-option=<span class="number">3</span>,<span class="number">10.2</span>.<span class="number">166.10</span>                    <span class="comment"># 路由</span>
dhcp-option=<span class="symbol">option:</span>ntp-server,<span class="number">10.3</span>.<span class="number">1.233</span>    <span class="comment">#ntp 时间服务器</span>

<span class="comment"># DNS server</span>
no-resolv
no-poll
server=<span class="number">8.8</span>.<span class="number">8.8</span>
server=<span class="number">8.8</span>.<span class="number">4.4</span>
conf-dir=<span class="regexp">/etc/dnsmasq</span>.d                        <span class="comment"># 详细配置, 为后面分类解析做准备</span>

<span class="comment"># Static IPs                                </span>
dhcp-host=<span class="number">60</span><span class="symbol">:</span><span class="number">67</span><span class="symbol">:</span><span class="number">20</span><span class="symbol">:c3</span><span class="symbol">:bf</span><span class="symbol">:</span><span class="number">10</span>,<span class="number">10.2</span>.<span class="number">166.73</span>    <span class="comment"># 如需要可编辑固定 IP 列表</span></code></pre>
<p>配置分类解析配置文件<code>/etc/dnsmasq.d/china.conf</code>, 以使常用域名走国内 DNS 解析, 举例如下, 根据自身情况更改:</p>
<pre><code># <span class="built_in">server</span>=/domain.name/dns.<span class="built_in">server</span>
<span class="built_in">server</span>=/<span class="number">115.</span>com/<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>
<span class="built_in">server</span>=/<span class="number">123</span>u.com/<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>
<span class="built_in">server</span>=/<span class="number">126.</span>com/<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>
<span class="built_in">server</span>=/<span class="number">126.</span>net/<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>
<span class="built_in">server</span>=/<span class="number">163.</span>com/<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>
<span class="built_in">server</span>=/<span class="number">17173.</span>com/<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>
<span class="built_in">server</span>=/<span class="number">17</span>cdn.com/<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>
<span class="built_in">server</span>=/<span class="number">51.</span>la/<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>
<span class="built_in">server</span>=/<span class="number">6</span>rooms.com/<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>
<span class="built_in">server</span>=/<span class="number">91.</span>com/<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></code></pre>
<p><strong>至此准备工作完成, 可以启动路由器了</strong></p>
<h3><code>3.4</code>    启动路由器</h3>
<p><strong>思路</strong></p>
<p>默认路由为 OpenVPN Server 端私网 IP, chnroute 生成的<a href="http://www.lailai-start.com/CN" target="_blank">3000 条国内路由</a>走国内链路, 以达到分流 / 翻墙的目的.</p>
<p><strong>步骤:</strong></p>
<ul>
<li>启动 Stunnel, 启动 DNSmasq</li>
<li>开启 linux 内核转发功能</li>
<li>启动 OpenVPN</li>
<li>增加 3000 条国内路由 (<a href="http://www.lailai-start.com/CN" target="_blank">点这里下载</a>)</li>
<li>增加默认路由, 增加下一跳为 OpenVPN Server 端私网 IP</li>
</ul>
<p>将步骤编写成脚本, 如下:</p>
<pre><code><span class="comment">#!/bin/sh</span>
<span class="comment"># Stunnel up</span>
<span class="regexp">/usr/bin/</span>stunnel
<span class="regexp">/usr/sbin/</span>dnsmasq

<span class="comment"># date ntp time</span>
ntpdate ntp.server.name
<span class="regexp">/sbin/route add -net 10.0.0.0/</span><span class="number">8</span> gw <span class="number">10.2</span><span class="number">.166</span><span class="number">.1</span>
<span class="regexp">/sbin/</span>route add -host server.ip.address gw <span class="number">10.2</span><span class="number">.166</span><span class="number">.1</span>

<span class="comment"># iptables NAT</span>
<span class="regexp">/sbin/i</span>ptables -t nat -A POSTROUTING -o tap0 -j MASQUERADE
sysctl -w net.ipv4.ip_forward=<span class="number">1</span>

<span class="comment"># start Openvpn</span>
killall openvpn
<span class="regexp">/usr/local/sbin/openvpn --daemon --config /etc/openvpn/</span>hk.ovpn
sleep <span class="number">5</span>
<span class="comment"># Chnrouters</span>
<span class="keyword">for</span> i <span class="keyword">in</span> `<span class="javascript">cat /root/bin/CN</span>` ; <span class="keyword">do</span> <span class="regexp">/sbin/</span>route add -net $i gw <span class="number">10.2</span><span class="number">.166</span><span class="number">.1</span> ; done
<span class="regexp">/sbin/</span>route del <span class="reserved">default</span>
<span class="regexp">/sbin/</span>route add <span class="reserved">default</span> gw <span class="number">10.2</span><span class="number">.166</span><span class="number">.1</span>
<span class="regexp">/sbin/</span>route add <span class="reserved">default</span> gw <span class="number">172.31</span><span class="number">.188</span><span class="number">.1</span></code></pre>
<p>启动脚本, Router 环境搭建完成, 国外网络访问测试:</p>
<pre><code><span class="comment"># tracert 8.8.8.8</span>
<span class="title">traceroute</span> to <span class="number">8.8.8.8</span> (<span class="number">8.8.8.8</span>), <span class="number">30</span> hops max, <span class="number">60</span> byte packets
 <span class="number">1</span>  <span class="number">172.31.188.1</span> (<span class="number">172.31.188.1</span>)  <span class="number">68</span>.<span class="number">963</span> ms  <span class="number">68</span>.<span class="number">913</span> ms  <span class="number">68</span>.<span class="number">914</span> ms
 <span class="number">2</span>  <span class="number">103.30.4.1</span> (<span class="number">103.30.4.1</span>)  <span class="number">109</span>.<span class="number">650</span> ms  <span class="number">109</span>.<span class="number">651</span> ms  <span class="number">109</span>.<span class="number">645</span> ms
 <span class="number">3</span>  <span class="number">172.16.0.2</span> (<span class="number">172.16.0.2</span>)  <span class="number">109</span>.<span class="number">410</span> ms  <span class="number">109</span>.<span class="number">454</span> ms  <span class="number">109</span>.<span class="number">448</span> ms
 <span class="number">4</span>  gi1-<span class="number">26</span>.br02.hkg04.pccwbtn.net (<span class="number">63.218.241.1</span>)  <span class="number">109</span>.<span class="number">384</span> ms  <span class="number">109</span>.<span class="number">384</span> ms  <span class="number">109</span>.<span class="number">465</span> ms
 <span class="number">5</span>  <span class="number">72.14.196.197</span> (<span class="number">72.14.196.197</span>)  <span class="number">109</span>.<span class="number">415</span> ms  <span class="number">109</span>.<span class="number">381</span> ms  <span class="number">109</span>.<span class="number">344</span> ms
 <span class="number">6</span>  <span class="number">209.85.241.56</span> (<span class="number">209.85.241.56</span>)  <span class="number">109</span>.<span class="number">368</span> ms <span class="number">209.85.241.58</span> (<span class="number">209.85.241.58</span>)  <span class="number">105</span>.<span class="number">488</span> ms  <span class="number">149</span>.<span class="number">385</span> ms
 <span class="number">7</span>  <span class="number">216.239.43.17</span> (<span class="number">216.239.43.17</span>)  <span class="number">108</span>.<span class="number">792</span> ms  <span class="number">68</span>.<span class="number">841</span> ms <span class="number">209.85.253.69</span> (<span class="number">209.85.253.69</span>)  <span class="number">69</span>.<span class="number">430</span> ms
 <span class="number">8</span>  * * *
 <span class="number">9</span>  google-public-dns-a.google.com (<span class="number">8.8.8.8</span>)  <span class="number">108</span>.<span class="number">102</span> ms  <span class="number">107</span>.<span class="number">936</span> ms  <span class="number">107</span>.<span class="number">819</span> ms</code></pre>
<p>可以看到直接走 OpenVPN 私网 IP 出去, 国内网络访问测试:</p>
<pre><code><span class="comment"># traceroute www.baidu.com</span>
<span class="title">traceroute</span> to www.baidu.com (<span class="number">115.239.210.26</span>), <span class="number">30</span> hops max, <span class="number">60</span> byte packets
 <span class="number">1</span>  <span class="number">10.2.166.1</span> (<span class="number">10.2.166.1</span>)  <span class="number">2</span>.<span class="number">267</span> ms  <span class="number">2</span>.<span class="number">470</span> ms  <span class="number">2</span>.<span class="number">623</span> ms
 <span class="number">2</span>  <span class="number">10.2.255.254</span> (<span class="number">10.2.255.254</span>)  <span class="number">2</span>.<span class="number">180</span> ms  <span class="number">2</span>.<span class="number">492</span> ms  <span class="number">2</span>.<span class="number">648</span> ms
 <span class="number">3</span>  * * *
 <span class="number">4</span>  * * *
 <span class="number">5</span>  * * *
 <span class="number">6</span>  <span class="number">123.125.40.254</span> (<span class="number">123.125.40.254</span>)  <span class="number">2</span>.<span class="number">714</span> ms  <span class="number">2</span>.<span class="number">634</span> ms  <span class="number">2</span>.<span class="number">883</span> ms
 <span class="number">7</span>  <span class="number">61.49.44.65</span> (<span class="number">61.49.44.65</span>)  <span class="number">1</span>.<span class="number">459</span> ms  <span class="number">1</span>.<span class="number">448</span> ms  <span class="number">1</span>.<span class="number">521</span> ms
 <span class="number">8</span>  <span class="number">61.148.160.5</span> (<span class="number">61.148.160.5</span>)  <span class="number">1</span>.<span class="number">443</span> ms  <span class="number">1</span>.<span class="number">466</span> ms  <span class="number">1</span>.<span class="number">459</span> ms
 <span class="number">9</span>  <span class="number">124.65.60.77</span> (<span class="number">124.65.60.77</span>)  <span class="number">3</span>.<span class="number">258</span> ms  <span class="number">5</span>.<span class="number">805</span> ms  <span class="number">5</span>.<span class="number">790</span> ms
<span class="number">10</span>  <span class="number">123.126.0.85</span> (<span class="number">123.126.0.85</span>)  <span class="number">3</span>.<span class="number">392</span> ms  <span class="number">3</span>.<span class="number">202</span> ms  <span class="number">3</span>.<span class="number">245</span> ms
<span class="number">11</span>  <span class="number">123.126.0.85</span> (<span class="number">123.126.0.85</span>)  <span class="number">3</span>.<span class="number">214</span> ms  <span class="number">5</span>.<span class="number">487</span> ms  <span class="number">3</span>.<span class="number">913</span> ms
<span class="number">12</span>  <span class="number">219.158.35.90</span> (<span class="number">219.158.35.90</span>)  <span class="number">71</span>.<span class="number">347</span> ms  <span class="number">71</span>.<span class="number">338</span> ms  <span class="number">71</span>.<span class="number">337</span> ms</code></pre>
<p>国内链路则直接走原本的网络环境出去.</p>
<h3><code>3.5</code>    配置监控脚本</h3>
<p>由于国际出口不一定稳定, OpenVPN 有可能会间歇性断掉, 如果发生此情况, 则会造成默认路由不可达, 从而导致国内网站浏览也会出现问题, 所以配置监控脚本, 一旦国际链路抽风, 则立刻将路由切换至国内.</p>
<p>脚本内容如下:</p>
<pre><code>    <span class="shebang">#!/bin/bash</span>
    ip=<span class="string">"172.31.188.1"</span>
    i=-1
    j=-1
    <span class="keyword">while</span> : ; <span class="keyword">do</span>
            ping <span class="variable">$ip</span> -c 5 -w 30
            <span class="keyword">if</span> <span class="test_condition">[ $? -ge <span class="string">"1"</span> ]</span>; <span class="keyword">then</span>
                route del default gw <span class="variable">$ip</span>
                j=-1
                i=$((i+1))
                txt=`date +%F<span class="string">" "</span>%X`<span class="string">" Ping <span class="variable">$ip</span> timed out."</span>
                ((<span class="variable">$i</span>%30==0)) &amp;&amp; <span class="keyword">echo</span> <span class="variable">$txt</span> &gt;&gt; /root/bin/logs/checkip.log 
                ((<span class="variable">$i</span>%30==0)) &amp;&amp; <span class="keyword">echo</span> <span class="variable">$txt</span> | mailx -s <span class="string">"VPN disconnected"</span> admin@domain.com
            <span class="keyword">else</span>
                route add default gw <span class="variable">$ip</span>
                i=-1
                j=$((j+1))
                txt=`date +%F<span class="string">" "</span>%X`<span class="string">" Ping <span class="variable">$ip</span> OK."</span>
                ((<span class="variable">$j</span>%30==0)) &amp;&amp; <span class="keyword">echo</span> <span class="variable">$txt</span> &gt;&gt; /root/bin/logs/checkip.log
                ((<span class="variable">$j</span>%100000==0)) &amp;&amp; <span class="keyword">echo</span> <span class="variable">$txt</span> | mailx -s <span class="string">"VPN OK."</span> admin@domain.com
            <span class="keyword">fi</span>
    sleep 10
    <span class="keyword">done</span></code></pre>
<p>后台启动此脚本, 则会每 10 秒监控一次出国链路, 如果断掉, 将会把路由切至国内, 不影响正常上网 ; 如果出国链路长期无法恢复, 则每 5 分钟给管理员发送一封告警邮件.</p>
<h2><code>4</code>.    Client</h2>
<p>客户端接入路由器所在交换机后, 配置为自动获取 IP 地址, 即可进行翻墙.</p>
]]></content>
    <category scheme="http://blog.archean.me/tags/gfw/" term="gfw"/>
    <category scheme="http://blog.archean.me/tags/RaspPi/" term="RaspPi"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[使用squid与stunnel构建安全的http代理服务器]]></title>
    <link href="http://blog.archean.me/2013/10/16/safe-http-proxy-over-squid-and-stunnel/"/>
    <id>http://blog.archean.me/2013/10/16/safe-http-proxy-over-squid-and-stunnel/</id>
    <published>2013-10-16T13:26:07.000Z</published>
    <updated>2013-10-16T13:28:31.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://www.squid-cache.org/Images/img4.jpg" alt="Squid" title="Squid"><br>使用 Squid 在服务器端打开一个代理端口, 同时用服务器上的 Stunnel 进行转发, 与客户端的 Stunnel 通过 SSL 链接, 达到代理的目的.</p>
<p>也可以使用客户端的 Stunnel 与 Squid 通过 SSL 直接相连.</p>
<p>本方法使用前者.<br><a id="more"></a></p>
<h1>1. 服务器端配置</h1>
<p>服务器环境:</p>
<pre><code><span class="preprocessor"># lsb_release -a</span>
LSB Version:    :core-<span class="number">4.0</span>-ia32:core-<span class="number">4.0</span>-noarch:graphics-<span class="number">4.0</span>-ia32:graphics-<span class="number">4.0</span>-noarch:printing-<span class="number">4.0</span>-    ia32:printing-<span class="number">4.0</span>-noarch
Distributor ID:    CentOS
<span class="label">Description:</span>    CentOS Linux release <span class="number">6.0</span> (Final)
<span class="label">Release:</span>    <span class="number">6.0</span>
<span class="label">Codename:</span>    Final    
<span class="preprocessor"># uname -a</span>
Linux jb1<span class="preprocessor">.archean</span><span class="preprocessor">.me</span> <span class="number">2.6</span><span class="number">.32</span>-<span class="number">71.</span>el6<span class="preprocessor">.i</span>686 <span class="preprocessor">#1 SMP Fri Nov 12 04:17:17 GMT 2010 i686 i686 i386 GNU/Linux</span></code></pre>
<h2>1.1 安装 Squid</h2>
<p>下载 squid 3.2.8</p>
<pre><code>wget http://www<span class="preprocessor">.squid</span>-cache<span class="preprocessor">.org</span>/Versions/v3/<span class="number">3.2</span>/squid-<span class="number">3.2</span><span class="number">.8</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span></code></pre>
<p>可以使用 CentOS 的 Yum 安装工具, 不过我更喜欢编译安装 (提前准备好编译环境, Gcc, openssl 等):</p>
<pre><code><span class="title">tar</span> zxvf squid-<span class="number">3.2</span><span class="number">.8</span>.tar.gz
<span class="title">cd</span> squid-<span class="number">3.2</span><span class="number">.8</span>
./configure <span class="comment">--prefix=/usr/local</span>
<span class="title">make</span>
<span class="title">make</span> install</code></pre>
<h2>1.2 配置 Squid</h2>
<p>这个拓扑结构只需要 Squid 做简单的 http 代理, 所以无需 SSL.</p>
<p>squid 的配置文件在<code>/usr/local/etc/squid.conf</code></p>
<p>备份之后, 将其按下面修改, 为防止被别的机器滥用, 只监听 127.0.0.1:</p>
<pre><code>###/usr/local/etc/squid.conf
###<span class="number">2013</span>-<span class="number">1</span>-<span class="number">27</span> <span class="number">19</span>:<span class="number">56</span> v0<span class="number">.0</span><span class="number">.1</span> for squid <span class="number">3.2</span><span class="number">.6</span>
#<span class="type">Xu</span> <span class="type">Zhang</span> &lt;zephyr422@gmail.com&gt;

<span class="title">visible_hostname</span> <span class="type">Archean</span>.me
<span class="title">cache_mgr</span> zephyr422@gmail.com
<span class="title">http_port</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3177</span>
<span class="title">icp_port</span> <span class="number">0</span>
<span class="title">cache_mem</span> <span class="number">256</span> <span class="type">MB</span>
<span class="title">dns_nameservers</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span>

<span class="title">coredump_dir</span> /usr/local/var/cache/squid
<span class="title">access_log</span> /usr/local/var/logs/squid_access.log
<span class="title">cache_log</span> /usr/local/var/logs/squid_cache.log

<span class="title">acl</span> localnet src <span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">8</span>    # <span class="type">RFC1918</span> possible internal network
<span class="title">acl</span> localnet src <span class="number">172.16</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">12</span>    # <span class="type">RFC1918</span> possible internal network
<span class="title">acl</span> localnet src <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span>    # <span class="type">RFC1918</span> possible internal network
<span class="title">acl</span> localnet src fc00::/<span class="number">7</span>       # <span class="type">RFC</span> <span class="number">4193</span> local private network range
<span class="title">acl</span> localnet src fe80::/<span class="number">10</span>      # <span class="type">RFC</span> <span class="number">4291</span> link-local (directly plugged) machines
<span class="title">acl</span> <span class="type">SSL_ports</span> port <span class="number">443</span>
<span class="title">acl</span> <span class="type">Safe_ports</span> port <span class="number">80</span>        # http
<span class="title">acl</span> <span class="type">Safe_ports</span> port <span class="number">21</span>        # ftp
<span class="title">acl</span> <span class="type">Safe_ports</span> port <span class="number">443</span>        # https
<span class="title">acl</span> <span class="type">Safe_ports</span> port <span class="number">70</span>        # gopher
<span class="title">acl</span> <span class="type">Safe_ports</span> port <span class="number">210</span>        # wais
<span class="title">acl</span> <span class="type">Safe_ports</span> port <span class="number">1025</span>-<span class="number">65535</span>    # unregistered ports
<span class="title">acl</span> <span class="type">Safe_ports</span> port <span class="number">280</span>        # http-mgmt
<span class="title">acl</span> <span class="type">Safe_ports</span> port <span class="number">488</span>        # gss-http
<span class="title">acl</span> <span class="type">Safe_ports</span> port <span class="number">591</span>        # filemaker
<span class="title">acl</span> <span class="type">Safe_ports</span> port <span class="number">777</span>        # multiling http
<span class="title">acl</span> <span class="type">CONNECT</span> method <span class="type">CONNECT</span>

<span class="title">http_access</span> deny !<span class="type">Safe_ports</span>
<span class="title">http_access</span> deny <span class="type">CONNECT</span> !<span class="type">SSL_ports</span>
<span class="title">http_access</span> allow localnet
<span class="title">http_access</span> allow localhost

<span class="title">http_access</span> deny all</code></pre>
<p>检查配置有没有问题:</p>
<pre><code><span class="title">squid</span> -k check</code></pre>
<p>或者</p>
<pre><code><span class="title">squid</span> -k parse    </code></pre>
<p>初始化 cache 目录</p>
<pre><code><span class="title">squid</span> -z</code></pre>
<p>一旦你已经初始化 cache 目录，就可以在终端窗口里运行 squid，将日志记录到标准错误。这样，就能轻易的定位任何错误或问题，并且确认 squid 是否成功启动。使用 -N 选项来保持 squid 在前台运行，-d1 选项在标准错误里显示 1 级别的调试信息。</p>
<pre><code><span class="comment">#</span> <span class="comment">squid</span> <span class="literal">-</span><span class="comment">N</span> <span class="literal">-</span><span class="comment">d1</code></pre>
<p>启动 squid:</p>
<pre><code><span class="attribute">squid</code></pre>
<p>检查是否启动成功, <code>ps -ef | grep squid</code> 或 <code>lsof -i:3177</code></p>
<p>模拟测试客户端连接:<br>    squidclient -p 3177 <a href="http://www.squid-cache.org/" target="_blank">http://www.squid-cache.org/</a></p>
<p>如期返回了 html 信息, 说明 Squid 已成功启动.</p>
<h2>1.3 安装 Stunnel</h2>
<p>下载稳定版 Stunnel</p>
<pre><code>wget https://www<span class="preprocessor">.stunnel</span><span class="preprocessor">.org</span>/downloads/stunnel-<span class="number">4.56</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span></code></pre>
<p>创建 Stunnel 用户:</p>
<pre><code><span class="comment">/usr/sbin/groupadd</span> <span class="literal">-</span><span class="comment">g</span> <span class="comment">122</span> <span class="comment">stunnel</span>
<span class="comment">/usr/sbin/useradd</span> <span class="literal">-</span><span class="comment">c</span> <span class="comment">stunnel</span> <span class="literal">-</span><span class="comment">d</span> <span class="comment">/nonexistent</span> <span class="literal">-</span><span class="comment">m</span> <span class="literal">-</span><span class="comment">g</span> <span class="comment">122</span> <span class="literal">-</span><span class="comment">u</span> <span class="comment">122</span> <span class="comment">stunnel</code></pre>
<p>安装:<br>    tar zxvf stunnel-4.56.tar.gz<br>    cd stunnel-4.56<br>    ./configure —prefix=/usr/local<br>    make<br>    makeinstall</p>
<p>安装过程通常会创建自签名证书, 会放到<code>/usr/local/etc/stunnel/stunnel.pem</code>可以直接使用 (有效期一年). 使用下面的命令检查证书详细内容:</p>
<pre><code><span class="comment">openssl</span> <span class="comment">x509</span> <span class="literal">-</span><span class="comment">subject</span> <span class="literal">-</span><span class="comment">dates</span> <span class="literal">-</span><span class="comment">fingerprint</span> <span class="literal">-</span><span class="comment">in</span> <span class="comment">stunnel</span>.<span class="comment">pem</span> 
<span class="comment">subject=</span> <span class="comment">/C=CN/ST=Beijing/L=Beijing/O=Archean</span> <span class="comment">Inc/OU=Archean</span> <span class="comment">Inc/CN=archean</span>.<span class="comment">me</span>
<span class="comment">notBefore=Apr</span> <span class="comment">20</span> <span class="comment">02:05:24</span> <span class="comment">2013</span> <span class="comment">GMT</span>
<span class="comment">notAfter=Apr</span> <span class="comment">20</span> <span class="comment">02:05:24</span> <span class="comment">2014</span> <span class="comment">GMT</span>
<span class="comment">SHA1</span> <span class="comment">Fingerprint=87:F8:6E:05:B8:9C:BC:A1:EA:15:B7:C9:B4:B2:75:FF:8A:CA:C5:FA</span>
<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">BEGIN</span> <span class="comment">CERTIFICATE</span>-<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>
<span class="comment">xxx</span>
<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">END</span> <span class="comment">CERTIFICATE</span>-<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></code></pre>
<p>给证书生成 Diffie-Hellman 部分</p>
<pre><code><span class="title">openssl</span> gendh <span class="number">512</span>&gt;&gt; stunnel.pem </code></pre>
<p>这在 4.x 版本的 stunnel 上好像是必须的.</p>
<p>如果想要自己生成证书, 命令如下:</p>
<pre><code><span class="comment">openssl</span> <span class="comment">req</span> <span class="literal">-</span><span class="comment">new</span> <span class="literal">-</span><span class="comment">x509</span> <span class="literal">-</span><span class="comment">days</span> <span class="comment">365</span> <span class="literal">-</span><span class="comment">nodes</span> <span class="literal">-</span><span class="comment">config</span> <span class="comment">openssl</span>.<span class="comment">cnf</span> <span class="literal">-</span><span class="comment">out</span> <span class="comment">stunnel</span>.<span class="comment">pem</span> <span class="literal">-</span><span class="comment">keyout</span> <span class="comment">stunnel</span>.<span class="comment">pem</span> </code></pre>
<h2>1.4 配置 Stunnel</h2>
<p>在<code>/usr/local/etc/stunnel/</code>下创建 stunnel.conf, 写入如下配置:</p>
<pre><code><span class="setting">cert = <span class="value">/usr/local/etc/stunnel/stunnel.pem</span></span>
<span class="setting">CAfile = <span class="value">/usr/local/etc/stunnel/stunnel.pem</span></span>
<span class="setting">socket = <span class="value">l:TCP_NODELAY=<span class="number">1</span></span></span>
<span class="setting">socket = <span class="value">r:TCP_NODELAY=<span class="number">1</span></span></span>

<span class="comment">;;;chroot = /var/run/stunnel</span>
<span class="setting">pid = <span class="value">/tmp/stunnel.pid</span></span>
<span class="setting">verify = <span class="value"><span class="number">3</span></span></span>

<span class="comment">;;; CApath = certs</span>
<span class="comment">;;; CRLpath = crls</span>
<span class="comment">;;; CRLfile = crls.pem</span>

<span class="setting">setuid = <span class="value">stunnel</span></span>
<span class="setting">setgid = <span class="value">stunnel</span></span>

<span class="comment">;;; client=yes</span>
<span class="setting">compression = <span class="value">zlib</span></span>
<span class="comment">;;; taskbar = no</span>
<span class="setting">delay = <span class="value"><span class="keyword">no</span></span></span>
<span class="comment">;;; failover = rr</span>
<span class="comment">;;; failover = prio</span>
<span class="setting">sslVersion = <span class="value">TLSv1</span></span>
<span class="setting">fips=<span class="value"><span class="keyword">no</span></span></span>

<span class="setting">debug = <span class="value"><span class="number">7</span></span></span>
<span class="setting">syslog = <span class="value"><span class="keyword">no</span></span></span>
<span class="setting">output = <span class="value">stunnel.log</span></span>

<span class="title">[sproxy]</span>
<span class="setting">accept = <span class="value"><span class="number">34567</span></span></span>
<span class="setting">connect = <span class="value"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3177</span></span></span></code></pre>
<p>此时便可启动 stunnel:</p>
<pre><code><span class="attribute">stunnel</code></pre>
<p>检查是否运行:</p>
<pre><code><span class="comment">ps</span> <span class="literal">-</span><span class="comment">ef</span> <span class="comment">|</span> <span class="comment">grep</span> <span class="comment">stunnel</span>
<span class="comment">lsof</span> <span class="literal">-</span><span class="comment">i:34567</code></pre>
<h2>1.5 将 Squid 和 Stunnel 加入开机启动项</h2>
<p>略</p>
<h1>2. 客户端配置</h1>
<h2>2.1 linux 客户端使用 stunnel 与服务器进行安全连接</h2>
<p>安装 Stunnel</p>
<p>与服务器完全相同, 略.</p>
<h2>2.2 配置客户端 Stunnel</h2>
<p>将服务器生成的证书传到客户端中:</p>
<pre><code><span class="title">cd</span> /usr/local/etc/stunnel
scp root<span class="variable">@jb1</span>.archean.<span class="url">me:/usr/local/etc/stunnel/stunnel.pem</span> ./</code></pre>
<p>创建配置文件</p>
<pre><code><span class="title">vim</span> stunnel.conf</code></pre>
<p>内容如下:</p>
<pre><code><span class="setting">id = <span class="value">/tmp/stunnel.pid</span></span>
<span class="setting">cert = <span class="value">/usr/local/etc/stunnel/stunnel.pem</span></span>
<span class="setting">socket = <span class="value">l:TCP_NODELAY=<span class="number">1</span></span></span>
<span class="setting">socket = <span class="value">r:TCP_NODELAY=<span class="number">1</span></span></span>
<span class="setting">verify = <span class="value"><span class="number">2</span></span></span>
<span class="setting">CAfile = <span class="value">/usr/local/etc/stunnel/stunnel.pem</span></span>
<span class="setting">client=<span class="value"><span class="keyword">yes</span></span></span>
<span class="setting">compression = <span class="value">zlib</span></span>
<span class="setting">ciphers = <span class="value">AES256-SHA</span></span>
<span class="setting">delay = <span class="value"><span class="keyword">no</span></span></span>
<span class="setting">failover = <span class="value">prio</span></span>
<span class="setting">sslVersion = <span class="value">TLSv1</span></span>
<span class="setting">fips = <span class="value"><span class="keyword">no</span></span></span>
<span class="title">[sproxy]</span>
<span class="setting">accept  = <span class="value"><span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">7071</span></span></span>
<span class="setting">connect = <span class="value">jb1.archean.me:<span class="number">34567</span></span></span></code></pre>
<p>其中 accept 是本地代理监听地址, 如不对外提供服务则改为<code>accept = 127.0.0.1:7071</code></p>
<p>启动 stunnel:</p>
<pre><code>/usr/<span class="keyword">local</span>/bin/stunnel</code></pre>
<p>至此, 配置完全结束, 可以通过使用<code>Client.IP.Address:7071</code>代理上网</p>
<h2>2.3 结语</h2>
<p>参考资料:</p>
<p><a href="http://home.arcor.de/pangj/squid/index.html" target="_blank">Squid 权威指南</a></p>
]]></content>
    <category scheme="http://blog.archean.me/tags/Squid/" term="Squid"/>
    <category scheme="http://blog.archean.me/tags/Stunnel/" term="Stunnel"/>
    <category scheme="http://blog.archean.me/tags/Http proxy/" term="Http proxy"/>
    <category scheme="http://blog.archean.me/categories/web/" term="web"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[为nginx配置https并自签名证书]]></title>
    <link href="http://blog.archean.me/2013/10/16/enable-nginx-ssl/"/>
    <id>http://blog.archean.me/2013/10/16/enable-nginx-ssl/</id>
    <published>2013-10-16T12:44:25.000Z</published>
    <updated>2013-10-19T16:20:12.000Z</updated>
    <content type="html"><![CDATA[<p>为了使网站可以使用加密的方式访问, 我们有时需要配置 https, 此文章简单介绍一下方法.</p>
<h2>把证书准备好。</h2>
<h3>制作 CA 证书：</h3>
<p>ca.key CA 私钥：</p>
<pre><code><span class="comment">openssl</span> <span class="comment">genrsa</span> <span class="literal">-</span><span class="comment">des3</span> <span class="literal">-</span><span class="comment">out</span> <span class="comment">ca</span>.<span class="comment">key</span> <span class="comment">2048</code></pre>
<p>制作解密后的 CA 私钥（一般无此必要）：</p>
<pre><code>openssl rsa -<span class="keyword">in</span> ca<span class="preprocessor">.key</span> -<span class="keyword">out</span> ca_decrypted<span class="preprocessor">.key</span></code></pre>
<p>ca.crt CA 根证书（公钥）：</p>
<pre><code><span class="comment">openssl</span> <span class="comment">req</span> <span class="literal">-</span><span class="comment">new</span> <span class="literal">-</span><span class="comment">x509</span> <span class="literal">-</span><span class="comment">days</span> <span class="comment">7305</span> <span class="literal">-</span><span class="comment">key</span> <span class="comment">ca</span>.<span class="comment">key</span> <span class="literal">-</span><span class="comment">out</span> <span class="comment">ca</span>.<span class="comment">crt</code></pre>
<p><a id="more"></a></p>
<h3>制作生成网站的证书并用 CA 签名认证</h3>
<p>在这里，假设网站域名为<code>blog.archean.me</code></p>
<p>生成 blog.archean.me 证书私钥：</p>
<pre><code>openssl genrsa -des3 -<span class="keyword">out</span> blog<span class="preprocessor">.archean</span><span class="preprocessor">.me</span><span class="preprocessor">.pem</span> <span class="number">1024</span></code></pre>
<p>制作解密后的 blog.archean.me 证书私钥：</p>
<pre><code>openssl rsa -<span class="keyword">in</span> blog<span class="preprocessor">.archean</span><span class="preprocessor">.me</span><span class="preprocessor">.pem</span> -<span class="keyword">out</span> blog<span class="preprocessor">.archean</span><span class="preprocessor">.me</span><span class="preprocessor">.key</span></code></pre>
<p>生成签名请求：</p>
<pre><code>openssl req -new -key blog<span class="preprocessor">.archean</span><span class="preprocessor">.me</span><span class="preprocessor">.pem</span> -<span class="keyword">out</span> blog<span class="preprocessor">.archean</span><span class="preprocessor">.me</span><span class="preprocessor">.csr</span></code></pre>
<p>在 common name 中填入网站域名，如 blog.archean.me 即可生成改站点的证书，同时也可以使用泛域名如<code>*.archean.me</code>来生成所有二级域名可用的网站证书。</p>
<p>用 CA 进行签名：</p>
<pre><code>openssl ca -policy policy_anything -days <span class="number">1460</span> -cert ca<span class="preprocessor">.crt</span> -keyfile ca<span class="preprocessor">.key</span> -<span class="keyword">in</span> blog<span class="preprocessor">.archean</span><span class="preprocessor">.me</span><span class="preprocessor">.csr</span> -<span class="keyword">out</span> blog<span class="preprocessor">.archean</span><span class="preprocessor">.me</span><span class="preprocessor">.crt</span></code></pre>
<p>其中，policy 参数允许签名的 CA 和网站证书可以有不同的国家、地名等信息，days 参数则是签名时限。<br>如果在执行签名命令时，出现<code>I am unable to access the ../../CA/newcerts directory</code></p>
<pre><code><span class="comment">修改 /etc/pki/tls/openssl</span>.<span class="comment">cnf 中“dir</span> <span class="comment">=</span> <span class="string">.</span><span class="comment">/CA”</code></pre>
<p>然后：</p>
<pre><code><span class="title">mkdir</span> -p <span class="type">CA</span>/newcerts
<span class="title">touch</span> <span class="type">CA</span>/index.txt
<span class="title">touch</span> <span class="type">CA</span>/serial
<span class="title">echo</span> “<span class="number">01</span>″ &gt; <span class="type">CA</span>/serial</code></pre>
<p>再重新执行签名命令。</p>
<p>最后，把 ca.crt 的内容粘贴到 blog.archean.me.crt 后面。这个比较重要！因为不这样做，可能会有某些浏览器不支持。<br>好了，现在 https 需要到的网站私钥 blog.archean.me.key 和网站证书 blog.archean.me.crt 都准备完毕。接下来开始配置服务端。</p>
<h2>配置 nginx</h2>
<p>新开一个虚拟主机，并在 server{}段中设置：</p>
<pre><code>listen <span class="number">443</span><span class="comment">;</span>
ssl on<span class="comment">;</span>
ssl_certificate /path/to/blog<span class="preprocessor">.archean</span><span class="preprocessor">.me</span><span class="preprocessor">.crt</span><span class="comment">;</span>
ssl_certificate_key /path/to/blog<span class="preprocessor">.archean</span><span class="preprocessor">.me</span><span class="preprocessor">.key</span><span class="comment">;</span></code></pre>
<p>其中的路径是刚刚生成的网站证书的路径。</p>
<p>然后使用一下命令检测配置和重新加载 nginx：</p>
<p>检测配置：</p>
<pre><code><span class="title">nginx</span> -t</code></pre>
<p>重新加载：</p>
<pre><code>nginx -s re<span class="operator"><span class="keyword">load</span></code></pre>
<p>在<a href="http://nginx.org/en/docs/http/configuring_https_servers.html" target="_blank">这里</a>是 nginx 官方的关于 https 的文档，可以作为参考。</p>
]]></content>
    <category scheme="http://blog.archean.me/tags/nginx/" term="nginx"/>
    <category scheme="http://blog.archean.me/tags/https/" term="https"/>
    <category scheme="http://blog.archean.me/tags/openssl/" term="openssl"/>
    <category scheme="http://blog.archean.me/categories/web/" term="web"/>
  </entry>
</feed>
