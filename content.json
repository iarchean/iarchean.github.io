{"pages":[{"title":"","text":"404 Not found | Hexo html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td{margin:0;padding:0;border:0;outline:0;font-weight:inherit;font-style:inherit;font-family:inherit;font-size:100%;vertical-align:baseline} body{line-height:1;color:#000;background:#fff} ol,ul{list-style:none} table{border-collapse:separate;border-spacing:0;vertical-align:middle} caption,th,td{text-align:left;font-weight:normal;vertical-align:middle} a img{border:none} body{font:14px \"Droid Serif\",\"Helvetica Neue\",Helvetica,Arial,sans-serif;color:#444;background:#eee;text-shadow:0 1px #fff} #content{width:700px;margin:0 auto;margin:100px auto 100px} #error-title{font-weight:bold;font-size:100px;text-align:center;line-height:1} #error-subtitle{font-size:24px;text-align:center;line-height:1;padding-top:10px} #error-message-wrap{-webkit-border-radius:5px;border-radius:5px;margin-top:15px;border:1px solid #ddd;overflow:hidden} #error-message-title{display:block;text-align:center;padding:8px;background:#f7f7f7} #error-message{-webkit-box-shadow:0 0 5px #111 inset;box-shadow:0 0 5px #111 inset;font-family:Monaco,Menlo,Consolas,monospace;font-size:12px;padding:25px 30px;line-height:1.6;background:#333;color:#ccc;text-shadow:none;overflow:auto} #error-btn-wrap{text-align:center;padding:30px 0} #error-btn{padding:10px 20px;font-size:16px;color:#ddd;background:#333;text-decoration:none;text-shadow:0 1px #000;border:1px solid #fff;display:inline-block;-webkit-border-radius:4px;border-radius:4px;} #error-btn:hover{background:#111} 404 Not found Back to home page","link":"/404.html"},{"title":"About me","text":"Archean ZhangSystem EngineerLinux / Bash / Python / PHP / Web 27岁, 山东人, 5年间就职于人人网, 任系统工程师; 爱折腾, 热爱互联网技术, 资深果粉.","link":"/about/index.html"}],"posts":[{"title":"用Linux做路由器","text":"今日完成了一个专线项目, 根据集团要求, 需要使用 NAT 的方式联通两个办公区之间的内部网络, 使得可以互相访问服务器资源, 并且保存3个月的 NAT 日志, 出问题可以快速定位到人. 由于我们办公区没有路由器设备, 于是采用 Linux 服务器做 iptables 转发来实现 NAT 功能, 并且 iptables 可以记录日志; 此项目设计的客户端和服务器不足百台, 不会有太高的并发访问, 一台中等配置的 Linux 服务器完全可以满足要求. 拓扑结构我负责的区域在左侧. 办公区和总部通过一条 20M 的 MSTP 线路相连, 互联网段是172.17.176.48/29. 在办公区10.250.0.0/16可以通过 SNAT 方式访问总部网络10.44.0.0/16, 源 IP 需要 NAT 为172.17.176.50/29 在总部可以通过访问互联地址172.17.176.51/29访问办公区的数据库服务器10.250.8.241 基本配置首先在我们10.250.0.0/16这个三层交换机上增加10.44.0.0/16的路由:1ip route-static 10.44.0.0 255.255.0.0 10.250.254.251 若要实现双向的 NAT, 还有一个必要条件是一台最小化安装的 Linux 服务器, 最少配置2个网卡, 在此场景下, 网卡配置为: eth0作为内部网卡, IP 地址是10.250.254.251; eth1作为互联网卡, IP 地址是172.17.176.50; eth1对端的 IP 为172.17.176.49. 服务器的路由配置, 需要能够访问办公区正常的网络资源, 同时将10.44.0.0/16路由至互联网卡:1234567# netstat -nrKernel IP routing tableDestination Gateway Genmask Flags MSS Window irtt Iface172.17.176.48 0.0.0.0 255.255.255.248 U 0 0 0 eth110.250.254.0 0.0.0.0 255.255.255.0 U 0 0 0 eth010.44.0.0 172.17.176.49 255.255.0.0 UG 0 0 0 eth110.250.0.0 10.250.254.254 255.0.0.0 UG 0 0 0 eth0 开启Linux 内核的转发功能, 编辑/etc/sysctl.conf, 加入如下语句:1net.ipv4.ip_forward = 1 访问总部网络资源此步骤涉及到 SNAT 的概念. 所谓 SNAT, 即将一段 IP 包的源地址改变, 由于总部的 ACL 策略中仅允许172.17.176.48/29网段访问, 所以我们访问总部时就必须将源地址 NAT 为上述网段. iptables 的 nat tables 有3个内置的 chain, 分别是PREROUTING, POSTROUTING和OUTPUTchain PREROUTING chain – Alters packets before routing. i.e Packet translation happens immediately after the packet comes to the system (and before routing). This helps to translate the destination ip address of the packets to something that matches the routing on the local server. This is used for DNAT (destination NAT).POSTROUTING chain – Alters packets after routing. i.e Packet translation happens when the packets are leaving the system. This helps to translate the source ip address of the packets to something that might match the routing on the desintation server. This is used for SNAT (source NAT).OUTPUT chain – NAT for locally generated packets on the firewall. 我们需要使用的是POSTROUTING chain. 1# iptables -A POSTROUTING -s 10.250.0.0/16 -o eth1 -j SNAT --to-source 172.17.176.50 解释一下, 就是将来自10.250.0.0/16网段的包, 由 eth1 网口出去时的源 IP 变更为172.17.176.50; 我们之前已经将路由配置为访问10.44网段时都走 eth1, 所以此行解决了访问总部的问题. 如果查看, 可以看到此条目已经生效:123# iptables -L -t nattarget prot opt source destinationNAT all -- 10.250.0.0/16 0.0.0.0/0 to:172.17.176.50 检查生效后可以使用/etc/init.d/iptables save 将此条保存到/etc/sysconfig/iptables中, 这样重启iptables 后也不会丢是配置. 总部访问办公区服务器此步骤不仅涉及 SNAT, 还涉及到了 DNAT 的概念. DNAT 即将一段 IP 包的目的地址改变. 此方式","link":"/2014/02/07/NAT-on-linux/"},{"title":"为nginx配置https并自签名证书","text":"为了使网站可以使用加密的方式访问, 我们有时需要配置https, 此文章简单介绍一下方法. ##把证书准备好。 ###制作CA证书： ca.key CA私钥： openssl genrsa -des3 -out ca.key 2048 制作解密后的CA私钥（一般无此必要）： openssl rsa -in ca.key -out ca_decrypted.key ca.crt CA根证书（公钥）： openssl req -new -x509 -days 7305 -key ca.key -out ca.crt ###制作生成网站的证书并用CA签名认证在这里，假设网站域名为blog.archean.me 生成blog.archean.me证书私钥： openssl genrsa -des3 -out blog.archean.me.pem 1024 制作解密后的blog.archean.me证书私钥： openssl rsa -in blog.archean.me.pem -out blog.archean.me.key 生成签名请求： openssl req -new -key blog.archean.me.pem -out blog.archean.me.csr 在common name中填入网站域名，如blog.archean.me即可生成改站点的证书，同时也可以使用泛域名如*.archean.me来生成所有二级域名可用的网站证书。 用CA进行签名： openssl ca -policy policy_anything -days 1460 -cert ca.crt -keyfile ca.key -in blog.archean.me.csr -out blog.archean.me.crt 其中，policy参数允许签名的CA和网站证书可以有不同的国家、地名等信息，days参数则是签名时限。如果在执行签名命令时，出现I am unable to access the ../../CA/newcerts directory 修改/etc/pki/tls/openssl.cnf中“dir = ./CA” 然后： mkdir -p CA/newcerts touch CA/index.txt touch CA/serial echo “01″ &gt; CA/serial 再重新执行签名命令。 最后，把ca.crt的内容粘贴到blog.archean.me.crt后面。这个比较重要！因为不这样做，可能会有某些浏览器不支持。好了，现在https需要到的网站私钥blog.archean.me.key和网站证书blog.archean.me.crt都准备完毕。接下来开始配置服务端。 ##配置nginx新开一个虚拟主机，并在server{}段中设置： listen 443; ssl on; ssl_certificate /path/to/blog.archean.me.crt; ssl_certificate_key /path/to/blog.archean.me.key; 其中的路径是刚刚生成的网站证书的路径。 然后使用一下命令检测配置和重新加载nginx： 检测配置： nginx -t 重新加载： nginx -s reload 在这里是nginx官方的关于https的文档，可以作为参考。","link":"/2013/10/16/enable-nginx-ssl/"},{"title":"Git Submodule 引发的问题","text":"做 Hexo 持续集成时发现 Repo 中的 Repo 总是无法提交，原来是 Submodule 的问题，看来还是要多读书。","link":"/2018/04/22/git-submodule/"},{"title":"搞定 Hexo","text":"经过几天的摸索, 实践, 初步搞定了Hexo, 也自己试着修改了一个主题, 折腾真的是无止境的. 回头静下心来的时候把这段时间折腾的成果整理一下, 算是对学习的总结.","link":"/2013/10/20/fulfil-with-hexo-theme/"},{"title":"Hexo 持续集成","text":"先把操作步骤写下来 如果要在一台新的机器上，或者别的机器写博客： git clone https://github.com/iarchean/iarchean.github.io.git cd iarchean.github.io npm install hexo-cli -g hexo new post example.md git commit &amp; git push done.","link":"/2019/01/28/hexo-auto-deploy-by-travis-ci/"},{"title":"Ubuntu Server 下安装 Mcrypt PHP extension","text":"Laravel4框架需要PHP 5.4以上及Mcrypt PHP extension, 折腾了半天, 记录下备忘. 安装Mcrypt包, 顺便安装php开发环境 $ sudo apt-get install php5-mcrypt php5-dev 将配置文件链接给PHP $ sudo ln -s /etc/php5/conf.d/mcrypt.ini /etc/php5/mods-available 开启Mcrypt模块 $ sudo php5enmod mcrypt 重启Nginx, PHP-FPM $ sudo /etc/init.d/nginx restart $ sudo service php5-fpm restart 此时重新执行php artisan, all is well. Hope can help you. Oct, 24 update: 后来知道这是Ununtu 13.10的一个Bug, 按如上操作完成后重启一次php5-fpm即可彻底解决.","link":"/2013/10/22/install-mcrypt-php-extension-on-ubuntu-server/"},{"title":"用 Dropbox public folder 做博客的超稳定图床","text":"这个Blog是搭建在Digital Ocean上的, 这个VPS还是很不错的, 加州的节点在天朝访问速度非常可以, 拥有20G SSD磁盘和每月1T的流量, 只需5$, 还是非常超值的. 但是即便如此, Blog需要的大量图片等元素还是非常占用空间的, 所以只好想办法寻找一个稳定的图床来存. 我一直是Dropbox的重度用户, 自然想到她的Public Folder. Dropbox Public目录每日限制流量 20G, 来源 Dropbox Public Folder的地址是https://dl.dropboxusercontent/u/idxxxxxxxx/, Blog引用起来不够优雅, 于是萌生了此文. 配置起来非常简单, 经过我的反复实践, Nginx vhost最小配置为: server { listen 80; server_name img.archean.me; root /path/to/www/root; #也可省略 location / { rewrite /(.*) /u/DropboxID/img/$1 break; proxy_pass https://dl.dropboxusercontent.com/; } } 此配置足以使用, 最终效果是当我访问http://img.archean.me/1.jpg时, 可以显示https://dl.dropboxusercontent.com/u/19060928/img/1.jpg的图片","link":"/2013/10/21/make-dropbox-public-folder-a-stable-pic-server/"},{"title":"Nginx禁止其他域名访问","text":"今天看到一则来自@kyaky的评论 让我也意识到这个问题的严重性: 如果别人把我的IP地址绑到他的域名上, 那我就是在为别人搭博客了. 我本以为Nginx配置中的server_name选项可以进行阻挡, 看来不实践真的是不能轻易下结论. 今天就回顾一下这个问题的所在, 及解决方案.DNS解析场景是这样: 域名 类型 IP A.com A a.b.c.d B.com A a.b.c.d 现在我的网站配置的默认服务是A.com.conf: server { listen 80 default; server_name A.com; } 当初我为了避免直接拿IP访问站点, 做了IP的过滤: if ( $host ~* &quot;\\d+\\.\\d+\\.\\d+\\.\\d+&quot; ) { return 403; } 在这种情况下, 访问A.com会找到a.b.c.d这个IP, Nginx解析得知匹配到了A.com.conf, 于是进入document root目录进行服务. 当访问B.com时, DNS也会找到a.b.c.d这个IP, Nginx解析得知没有匹配, 于是也会进入A.com.conf的document root, 继续提供服务 – 因为是default. 当时忽略了域名绑定IP的问题, 那么我再加一条if{}判断, 不符合archean.me的都返回403, 即可解决这个问题了. 但这样做显然不够优雅, 不仅陡然增加了Nginx配置文件的复杂度, 同时如果有多个域名绑定这台机器, 需要修改的地方就太多了. 所以查阅Nginx官方资料, 果然有相应的解决办法 原来我没有做默认服务default.conf的配置, A Default &quot;Catch All&quot; Server Block server { listen 80 default_server; server_name _; # This is just an invalid value which will never trigger on a real hostname. return 403; } 关键在于server_name _;, 这是指无效域名, 无论是IP地址, 错误的域名拼写或是未在其他虚拟主机配置中提到的域名, 均会触发return 403;, 显示页面不存在. 于是略加改进, 去掉其他虚拟主机中的default字段; 把default.conf中的return 403;改为重定向到我们期望的默认首页, 即可解决我们的问题. server { listen 80 default_server; server_name _; rewrite ^ http://archean.me$request_uri?; }","link":"/2013/10/24/nginx-deny-other-domain-access/"},{"title":"使用Squid与Stunnel构建安全的http代理服务器","text":"使用Squid在服务器端打开一个http 验证的代理端口, 同时用服务器上的Stunnel进行转发, 与客户端的Stunnel通过SSL链接, 达到代理的目的. 也可以使用客户端的Stunnel与Squid通过SSL直接相连. 本方法使用前者. 1. 服务器端配置服务器环境: 12345678# lsb_release -aLSB Version: :core-4.0-ia32:core-4.0-noarch:graphics-4.0-ia32:graphics-4.0-noarch:printing-4.0- ia32:printing-4.0-noarchDistributor ID: CentOSDescription: CentOS Linux release 6.0 (Final)Release: 6.0Codename: Final # uname -aLinux jb1.archean.me 2.6.32-71.el6.i686 #1 SMP Fri Nov 12 04:17:17 GMT 2010 i686 i686 i386 GNU/Linux 1.1 安装Squid下载squid 3.2.8 1# wget http://www.squid-cache.org/Versions/v3/3.2/squid-3.2.8.tar.gz 可以使用CentOS的Yum安装工具, 不过我更喜欢编译安装(提前准备好编译环境, Gcc, openssl等): 12345# tar zxvf squid-3.2.8.tar.gz# cd squid-3.2.8# ./configure --prefix=/usr/local --enable-basic-auth-helpers=NCSA# make# make install 1.2 配置Squid这个拓扑结构只需要Squid做简单的http代理, 所以无需SSL. squid的配置文件在/usr/local/etc/squid.conf 备份之后, 将其按下面修改, 为防止被别的机器滥用, 只监听127.0.0.1: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748###/usr/local/etc/squid.conf###2013-1-27 19:56 v0.0.1 for squid 3.2.6#Xu Zhang &lt;zephyr422@gmail.com&gt;visible_hostname Archean.mecache_mgr zephyr422@gmail.comhttp_port 127.0.0.1:3177icp_port 0cache_mem 256 MBdns_nameservers 8.8.8.8 8.8.4.4coredump_dir /usr/local/var/cache/squidaccess_log /usr/local/var/logs/squid_access.logcache_log /usr/local/var/logs/squid_cache.logauth_param basic program /usr/local/libexec/basic_ncsa_auth /usr/local/etc/squid.passwd #使用 HTTP 基本验证auth_param basic children 5auth_param basic realm Archean&apos;s GFW Breaker Proxy, to forward, please input &quot;Username/Password&quot;.auth_param basic credentialsttl 7 daysauth_param basic casesensitive offacl password proxy_auth REQUIREDacl localnet src 10.0.0.0/8 # RFC1918 possible internal networkacl localnet src 172.16.0.0/12 # RFC1918 possible internal networkacl localnet src 192.168.0.0/16 # RFC1918 possible internal networkacl localnet src fc00::/7 # RFC 4193 local private network rangeacl localnet src fe80::/10 # RFC 4291 link-local (directly plugged) machinesacl SSL_ports port 443acl Safe_ports port 80 # httpacl Safe_ports port 21 # ftpacl Safe_ports port 443 # httpsacl Safe_ports port 70 # gopheracl Safe_ports port 210 # waisacl Safe_ports port 1025-65535 # unregistered portsacl Safe_ports port 280 # http-mgmtacl Safe_ports port 488 # gss-httpacl Safe_ports port 591 # filemakeracl Safe_ports port 777 # multiling httpacl CONNECT method CONNECThttp_access allow passwordhttp_access deny !Safe_portshttp_access deny CONNECT !SSL_portshttp_access allow localnethttp_access allow localhosthttp_access deny all 检查配置有没有问题: 1# squid -k check 或者 1# squid -k parse 生成密码文件(-c), 创建账户. (如果没有htpasswd需要安装 httpd, 略) 123# htpasswd -c /usr/local/etc/squid.passwd archeannew password... 初始化cache目录 1# squid -z 一旦你已经初始化cache目录，就可以在终端窗口里运行squid，将日志记录到标准错误。这样，就能轻易的定位任何错误或问题，并且确认squid是否成功启动。使用-N选项来保持squid在前台运行，-d1选项在标准错误里显示1级别的调试信息。 1# squid -N -d1 启动squid: 1# squid 检查是否启动成功, ps -ef | grep squid 或 lsof -i:3177 模拟测试客户端连接: 1# squidclient -p 3177 http://www.squid-cache.org/ 如期返回了html信息, 说明Squid已成功启动. 1.3 安装Stunnel下载稳定版Stunnel 1# wget https://www.stunnel.org/downloads/stunnel-4.56.tar.gz 创建Stunnel用户: 12# /usr/sbin/groupadd -g 122 stunnel# /usr/sbin/useradd -c stunnel -d /nonexistent -m -g 122 -u 122 stunnel 安装: 12345# tar zxvf stunnel-4.56.tar.gz# cd stunnel-4.56# ./configure --prefix=/usr/local# make# makeinstall 安装过程通常会创建自签名证书, 会放到/usr/local/etc/stunnel/stunnel.pem可以直接使用(有效期一年). 使用下面的命令检查证书详细内容: 12345678# openssl x509 -subject -dates -fingerprint -in stunnel.pem subject= /C=CN/ST=Beijing/L=Beijing/O=Archean Inc/OU=Archean Inc/CN=archean.menotBefore=Apr 20 02:05:24 2013 GMTnotAfter=Apr 20 02:05:24 2014 GMTSHA1 Fingerprint=87:F8:6E:05:B8:9C:BC:A1:EA:15:B7:C9:B4:B2:75:FF:8A:CA:C5:FA-----BEGIN CERTIFICATE-----xxx-----END CERTIFICATE----- 给证书生成 Diffie-Hellman 部分 1# openssl gendh 512&gt;&gt; stunnel.pem 这在4.x版本的stunnel上好像是必须的. 如果想要自己生成证书, 命令如下: 1# openssl req -new -x509 -days 365 -nodes -config openssl.cnf -out stunnel.pem -keyout stunnel.pem 1.4 配置Stunnel在/usr/local/etc/stunnel/下创建stunnel.conf, 写入如下配置: 1234567891011121314151617181920212223242526272829303132cert = /usr/local/etc/stunnel/stunnel.pemCAfile = /usr/local/etc/stunnel/stunnel.pemsocket = l:TCP_NODELAY=1socket = r:TCP_NODELAY=1;;;chroot = /var/run/stunnelpid = /tmp/stunnel.pidverify = 3;;; CApath = certs;;; CRLpath = crls;;; CRLfile = crls.pemsetuid = stunnelsetgid = stunnel;;; client=yescompression = zlib;;; taskbar = nodelay = no;;; failover = rr;;; failover = priosslVersion = TLSv1fips=nodebug = 7syslog = nooutput = stunnel.log[sproxy]accept = 34567connect = 127.0.0.1:3177 此时便可启动stunnel: 1# stunnel 检查是否运行: 12# ps -ef | grep stunnel# lsof -i:34567 1.5 将Squid和Stunnel加入开机启动项略 2. 客户端配置2.1 linux客户端使用stunnel与服务器进行安全连接安装Stunnel 与服务器完全相同, 略. 2.2 配置客户端Stunnel将服务器生成的证书传到客户端中: 12# cd /usr/local/etc/stunnel# scp root@jb1.archean.me:/usr/local/etc/stunnel/stunnel.pem ./ 创建配置文件 1# vim stunnel.conf 内容如下: 12345678910111213141516id = /tmp/stunnel.pidcert = /usr/local/etc/stunnel/stunnel.pemsocket = l:TCP_NODELAY=1socket = r:TCP_NODELAY=1verify = 2CAfile = /usr/local/etc/stunnel/stunnel.pemclient=yescompression = zlibciphers = AES256-SHAdelay = nofailover = priosslVersion = TLSv1fips = no[sproxy]accept = 0.0.0.0:7071connect = jb1.archean.me:34567 其中accept是本地代理监听地址, 如不对外提供服务则改为accept = 127.0.0.1:7071 启动stunnel: 1# /usr/local/bin/stunnel 至此, 配置完全结束, 可以通过使用Client.IP.Address:7071代理上网 2.3 结语参考资料: Squid权威指南","link":"/2013/10/16/safe-http-proxy-over-squid-and-stunnel/"},{"title":"Secure Proxy Service","text":"###0. 免责声明1此服务仅用于研究互联网技术, 使用者访问了任何网站或发表了任何言论, 不代表本人支持其观点. ###1. 描述 这是一个”加密的” socks 代理服务, 使用者能够安全的访问世界上任何一个网站, 在本地网络状况正常的情况下, 可以: 流畅的播放 YouTube 720P 视频, 基本流畅的播放 1080P 视频: 访问 Facebook, Twitter, Instagram 等网站. 为一些 app 提供访问支持. ###2. 如何使用 我会将服务 IP/端口(全局代理方式)和 PAC URL(Proxy Auto Config 方式) 以邮件形式发送到你的私人邮箱中, 获取到之后, 分别按照如下说明使用: 全局代理在 IE 的 Lan 代理设置, Chrome 的 SwitchyOmega 插件, 或 mac 的网络代理配置中填写服务 IP 及端口, 正确操作后, 所有 http 服务都将走代理访问, 会导致部分网站访问速度变慢. Proxy Auto Config 文件在 IE 的 Lan 代理设置, Chrome 的 SwitchyOmega 插件, 或 mac 的网络代理配置中填写 pac 文件位置, 正确操作后, pac 白名单中的 http 服务将走代理访问, 推荐方式. ###3. 现存问题 网络状况众所周知中国几个跨洋光缆不是那么稳定, 代理服务有时会出现网络波动及不可用(非常少, 4年中大概总计1天)的问题, 我这里有几个不同的国外服务器, 在出现异常情况时会及时切换. 端口被复用提供给你的服务端口或 PAC 文件是完全开放的, 意味着一旦泄露, 别人可以直接拿来用, 所以强烈建议不要与其他人共享. 关于此事, 我正研究不影响用户体验的验证方式, 后续将会改版. 安全问题虽然我保证不会这么做, 且也没什么必要, 但我是有技术手段监听你所有流量的, 请在确保不会提交隐私信息的情况下使用. ###4. 费用 费用是10元/月, 或100元/年, 接受 Alipay 或 PayPal 转账, 帐号均为 zephyr422@gmail.com. 如果服务由于不可抗力中断, 我会退给你剩余时间的费用. ###5. 一些解释 加密的: 在国内-&gt;国外这个阶段的所有流量会经过我的加密, 不会遭遇政府的窃取. 访问速度: 与使用人数, 本地网络状况及国际线路有关, 我会尽可能确保稳定.","link":"/2014/01/23/secure-proxy-service/"},{"title":"试一下 Hexo 新主题：icarus","text":"最近将主题从从切换到 icarus，感觉很不错，新建一篇文章试一下。","link":"/2019/03/01/test-new-theme/"},{"title":"The Great Gatsby","text":"刚刚陪看了the Great Gatsby, 有感于莱昂纳多精湛的演绎, 电影绝美的画面以及这个凄美的梦. 电影的原著小说是看过的，但是莱昂纳多演绎下的盖茨比，真的非常立体丰富，特别是在电影中间他与黛西间面前紧张、局促、不安的表现，简直呈现的淋漓尽致。 Young And Beautiful I’ve seen the worldDone it allHad my cake nowDiamonds, brilliantAnd Bel Air nowHot summer nights, mid JulyWhen you and I were forever wildThe crazy days, city lightsThe way you’d play with me like a child Will you still love meWhen I’m no longer young and beautiful?","link":"/2013/10/22/the-great-gatsby/"},{"title":"使用一台Raspberry Pi作为家庭网关, 无障碍翻墙","text":"Arthor: Archean Zhang Email: zephyr422@gmail.com Version: 1.0.1 Date: 2013/8/16 长期被GFW困扰, 我终于忍不住动手了: 把家里的Raspberry Pi和与自由世界的主机建立OpenVPN over Stunnel的链路, 根据大中华3000条路由来匹配, 国外网站自动走OpenVPN出去以实现翻墙. 以下文章是基于一台Linux服务器(CentOS 6.4)撰写的, 将下面Router的换成Raspberry Pi也一样. 1. 准备硬件: 1台位于自由世界的Linux服务器 (Server) 1台位于本地的Linux服务器 (Router) 客户端 (Client) 软件: Stunnel OpenVPN DNSMasq 拓扑图: 2. Server端配置安装好Linux系统后(Red hat或CentOS), 同步服务器时间(非常重要):1# ntpdate time.nist.gov 2.1 OpenVPN下载安装OpenVPN, 生成服务器端证书, OpenVPN依赖lzo, 需要一同安装:12# yum install lzo openvpn 服务器端配置文件/etc/openvpn/server.conf, 范例及说明如下:1234567891011121314151617local 127.0.0.1 #监听本地接口port 4443 #监听端口proto tcp #协议dev tap ca /etc/openvpn/keys/ca.crt #证书cert /etc/openvpn/keys/server.crt #证书dh /etc/openvpn/keys/dh1024.pem #证书server 172.31.189.0 255.255.255.0 #网段client-to-clientduplicate-cnkeepalive 10 120comp-lzopersist-keypersist-tunstatus openvpn-status.log #状态日志log-append openvpn.log #执行日志verb 3 启动openvpn:1# openvpn --config /etc/openvpn/server.conf --deamon 观察日志, 如果出现“Initialization Sequence Completed”则代表启动成功. 2.2 StunnelOpenvpn的Server端只监控本地接口, 就是为了用Stunnel将流量加密, 在Local端安全的链接, 达到加密, 混淆流量的作用, 以绕开GFW的监控. 下载安装stunnel12# yum install stunnel 安装过程中会生成服务器证书stunnel.pem, 按照提示来即可. 编辑配置文件/usr/bin/etc/stunnel.conf, 如下所示:1234567891011121314151617181920212223cert = /usr/local/etc/stunnel/stunnel.pemCAfile = /usr/local/etc/stunnel/stunnel.pemsocket = l:TCP_NODELAY=1socket = r:TCP_NODELAY=1pid = /tmp/stunnel.pidverify = 3setuid = stunnelsetgid = stunnelcompression = zlibdelay = nosslVersion = TLSv1fips=nodebug = 7syslog = nooutput = /usr/local/etc/stunnel/stunnel.log[s-openvpn] accept = 13579 #监听端口connect = 127.0.0.1:4443 #OpenVPN端口 启动stunnel:1# stunnel 查看OpenVPN和Stunnel是否正确执行, 检查相应端口:1234567891011# netstat -ntwlaActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:13579 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:4443 127.0.0.1:50223 ESTABLISHED # lsof -i:4443 -nCOMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEopenvpn 25290 root 5u IPv4 2982393 0t0 TCP *:pharos (LISTEN)openvpn 25290 root 8u IPv4 3361561 0t0 TCP 127.0.0.1:pharos-&gt;127.0.0.1:50223 (ESTABLISHED)stunnel 26801 stunnel 10u IPv4 3361560 0t0 TCP 127.0.0.1:50223-&gt;127.0.0.1:pharos (ESTABLISHED) 看到端口均已正确监听, 至此Server端配置完成 3. Router配置安装好Linux系统后(Red hat或CentOS), 同步服务器时间(非常重要):12# ntpdate time.nist.gov 3.1 安装StunnelRouter端需要首先安装Stunnel, 在本地开启加密链路, 透传OpenVPN加密端口4443, 然后OpenVPN才能开始接入: 1# yum install stunnel 将Server端Stunnel证书传过来, 以便验证: 1# scp root@server:/usr/local/etc/stunnel.pem root@router:/usr/local/etc/stunnel.pem 开始进行stunnel配置, 配置文件/usr/local/etc/stunnel.conf: 1234567891011121314151617pid = /tmp/stunnel.pidcert = /usr/local/etc/stunnel/stunnel.pemsocket = l:TCP_NODELAY=1socket = r:TCP_NODELAY=1verify = 3CAfile = /usr/local/etc/stunnel/stunnel.pemclient=yescompression = zlibciphers = AES256-SHAdelay = nofailover = priosslVersion = TLSv1output = /root/bin/logs/stunnel.log[s-openvpn]accept = 127.0.0.1:4443connect = server.ip.address:13579 启动stunnel: 1# stunnel 3.2 安装OpenVPN下载安装OpenVPN, OpenVPN依赖lzo, 需要一同安装: 1# yum install lzo openvpn 配置Router端配置文件/etc/openvpn/hk.ovpn: 123456789101112131415161718dev tap #设备模式port 65530 #本地监听端口proto tcp #协议client #服务模式:clienttls-client #加密客户端ns-cert-type server remote 127.0.0.1 4443 #Server端口, 由于使用Stunnel加密透传, 所以连接本地端口ca /etc/openvpn/ca/ca.crt #证书key /etc/openvpn/ca/client1.key #证书cert /etc/openvpn/ca/client1.crt #证书persist-keypersist-tun#route-method exe#route-delay 2comp-lzostatus /etc/openvpn/openvpn-status.log #状态日志log-append /etc/openvpn/ca.log #执行日志verb 3 启动OpenVPN: 1# openvpn --daemon --config /etc/openvpn/hk.ovpn 观察日志, 如果出现“Initialization Sequence Completed”则代表启动成功. 检查隧道: 123456789101112131415# ip addr11: tap0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 100 link/ether 06:10:50:e5:e5:2c brd ff:ff:ff:ff:ff:ff inet 172.31.188.2/24 brd 172.31.188.255 scope global tap0 inet6 fe80::410:50ff:fee5:e52c/64 scope link valid_lft forever preferred_lft forever # ping 172.31.188.1PING 172.31.188.1 (172.31.188.1) 56(84) bytes of data.64 bytes from 172.31.188.1: icmp_seq=1 ttl=64 time=67.3 ms64 bytes from 172.31.188.1: icmp_seq=2 ttl=64 time=67.1 ms^C--- 172.31.188.1 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1588msrtt min/avg/max/mdev = 67.183/67.284/67.386/0.278 ms 链路通畅 3.3 安装DNSmasqRouter若要进行翻墙, 需要使用国外DNS, 而浏览国内网站时, 如果使用国外DNS, 会造成将访问导向国外站点, 造成访问速度变慢, 所以此方案使用DNSmasq解决此问题. 同时DNSmasq也是一个轻量级DHCP服务器, 非常方便好用. 安装DNSmasq: 1# yum install dnsmasq 编辑DNSmasq配置文件/etc/dnsmasq.conf, 假设Router本地IP是10.2.166.10, 本地分发网段是10.2.166.0/24, 则配置如下: 12345678910111213141516171819202122# DHCP configexpand-hostsdomain=archean.me# DHCP Rangedhcp-range=10.2.166.50,10.2.166.150,12h #DHCP地址池# DHCP routedhcp-option=3,10.2.166.10 #路由# Apple ntp serverdhcp-option=option:ntp-server,10.3.1.233 #ntp时间服务器# DNS serverno-resolvno-pollserver=8.8.8.8server=8.8.4.4conf-dir=/etc/dnsmasq.d# AppleTV trailersaddress=/trailers.apple.com/180.153.225.136# Static IPs# dhcp-host=xx:xx:xx:xx:xx:xx,10.2.166.121 配置分类解析配置文件/etc/dnsmasq.d/china.conf, 以使常用域名走国内DNS解析, 举例如下, 根据自身情况更改: 1234567891011# server=/domain.name/dns.serverserver=/115.com/114.114.114.114server=/123u.com/114.114.114.114server=/126.com/114.114.114.114server=/126.net/114.114.114.114server=/163.com/114.114.114.114server=/17173.com/114.114.114.114server=/17cdn.com/114.114.114.114server=/51.la/114.114.114.114server=/6rooms.com/114.114.114.114server=/91.com/114.114.114.114 至此准备工作完成, 可以启动路由器了 3.4 启动路由器思路 默认路由为OpenVPN Server端私网IP, chnroute生成的3000条国内路由走国内链路, 以达到分流/翻墙的目的. 步骤: 启动Stunnel, 启动DNSmasq 开启linux内核转发功能 启动OpenVPN 增加3000条国内路由(点这里下载) 增加默认路由, 增加下一跳为OpenVPN Server端私网IP 将步骤编写成脚本, 如下: 1234567891011121314151617181920212223#!/bin/sh# Stunnel up/usr/bin/stunnel/usr/sbin/dnsmasq# date ntp timentpdate ntp.server.name/sbin/route add -net 10.0.0.0/8 gw 10.2.166.1/sbin/route add -host server.ip.address gw 10.2.166.1# iptables NAT/sbin/iptables -t nat -A POSTROUTING -o tap0 -j MASQUERADEsysctl -w net.ipv4.ip_forward=1# start Openvpnkillall openvpn/usr/local/sbin/openvpn --daemon --config /etc/openvpn/hk.ovpnsleep 5# Chnroutersfor i in `cat /root/bin/CN` ; do /sbin/route add -net $i gw 10.2.166.1 ; done/sbin/route del default/sbin/route add default gw 10.2.166.1/sbin/route add default gw 172.31.188.1 启动脚本, Router环境搭建完成, 国外网络访问测试: 1234567891011# tracert 8.8.8.8traceroute to 8.8.8.8 (8.8.8.8), 30 hops max, 60 byte packets 1 172.31.188.1 (172.31.188.1) 68.963 ms 68.913 ms 68.914 ms 2 103.30.4.1 (103.30.4.1) 109.650 ms 109.651 ms 109.645 ms 3 172.16.0.2 (172.16.0.2) 109.410 ms 109.454 ms 109.448 ms 4 gi1-26.br02.hkg04.pccwbtn.net (63.218.241.1) 109.384 ms 109.384 ms 109.465 ms 5 72.14.196.197 (72.14.196.197) 109.415 ms 109.381 ms 109.344 ms 6 209.85.241.56 (209.85.241.56) 109.368 ms 209.85.241.58 (209.85.241.58) 105.488 ms 149.385 ms 7 216.239.43.17 (216.239.43.17) 108.792 ms 68.841 ms 209.85.253.69 (209.85.253.69) 69.430 ms 8 * * * 9 google-public-dns-a.google.com (8.8.8.8) 108.102 ms 107.936 ms 107.819 ms 可以看到直接走OpenVPN私网IP出去, 国内网络访问测试: 1234567891011121314# traceroute www.baidu.comtraceroute to www.baidu.com (115.239.210.26), 30 hops max, 60 byte packets 1 10.2.166.1 (10.2.166.1) 2.267 ms 2.470 ms 2.623 ms 2 10.2.255.254 (10.2.255.254) 2.180 ms 2.492 ms 2.648 ms 3 * * * 4 * * * 5 * * * 6 123.125.40.254 (123.125.40.254) 2.714 ms 2.634 ms 2.883 ms 7 61.49.44.65 (61.49.44.65) 1.459 ms 1.448 ms 1.521 ms 8 61.148.160.5 (61.148.160.5) 1.443 ms 1.466 ms 1.459 ms 9 124.65.60.77 (124.65.60.77) 3.258 ms 5.805 ms 5.790 ms 10 123.126.0.85 (123.126.0.85) 3.392 ms 3.202 ms 3.245 ms11 123.126.0.85 (123.126.0.85) 3.214 ms 5.487 ms 3.913 ms12 219.158.35.90 (219.158.35.90) 71.347 ms 71.338 ms 71.337 ms 国内链路则直接走原本的网络环境出去. 3.5 配置监控脚本由于国际出口不一定稳定, OpenVPN有可能会间歇性断掉, 如果发生此情况, 则会造成默认路由不可达, 从而导致国内网站浏览也会出现问题, 所以配置监控脚本, 一旦国际链路抽风, 则立刻将路由切换至国内. 脚本内容如下: 1234567891011121314151617181920212223#!/bin/bash ip=&quot;172.31.188.1&quot; i=-1 j=-1 while : ; do ping $ip -c 5 -w 30 if [ $? -ge &quot;1&quot; ]; then route del default gw $ip j=-1 i=$((i+1)) txt=`date +%F&quot; &quot;%X`&quot; Ping $ip timed out.&quot; (($i%30==0)) &amp;&amp; echo $txt &gt;&gt; /root/bin/logs/checkip.log (($i%30==0)) &amp;&amp; echo $txt | mailx -s &quot;VPN disconnected&quot; admin@domain.com else route add default gw $ip i=-1 j=$((j+1)) txt=`date +%F&quot; &quot;%X`&quot; Ping $ip OK.&quot; (($j%30==0)) &amp;&amp; echo $txt &gt;&gt; /root/bin/logs/checkip.log (($j%100000==0)) &amp;&amp; echo $txt | mailx -s &quot;VPN OK.&quot; admin@domain.com fi sleep 10 done 后台启动此脚本, 则会每10秒监控一次出国链路, 如果断掉, 将会把路由切至国内, 不影响正常上网; 如果出国链路长期无法恢复, 则每5分钟给管理员发送一封告警邮件. 4. Client客户端接入路由器所在交换机后, 配置为自动获取IP地址, 即可进行翻墙.","link":"/2013/10/16/breaking-gfw-with-raspberry-pi/"},{"title":"Docker 学习笔记","text":"最近公司的一些服务将要迁移至 Docker 平台，为了能够理解 Docker 原理，决定自己从零开始学习 Docker 这个风靡全球的容器解决方案，将学习的过程记录下来。 安装Docker 在 CentOS 6.10 上的安装公司的系统使用的是 CentOS 6，所以先将内核升级至 3.10 以上版本 123rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.orgyum install https://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpmyum --enablerepo=elrepo-kernel install kernel-lt -y 之后使用下面的命令将 Docker 源加入到 yum 源中 12345678tee /etc/yum.repos.d/docker.repo &lt;&lt;-&apos;EOF&apos;[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF 之后运行下面的命令安装、启动 Docker 12yum install -y docker-engineservice docker start 中间遇到很多问题，大概列举一下 docker: relocation error: docker: symbol dm_task_get_info_with_deferred_remove, version Base not defined in file libdevmapper.so.1.02 with link time reference 这个是说 device-mapper 版本过低，升级一下 1yum update device-mapper FATAL: Module bridge not found. 内核版本问题，升级到 3.10 以上解决 FATA[0000] Error starting daemon: Error initializing network controller: Error creating default “bridge” network: can’t find an address range for interface “docker0” 此错误是因为公司内网有 172.16.0.0/16 的路由表，将 docker0 的网卡网段占用了导致的，通过在 /etc/sysconfig/docker 中增加以下参数，强制让 Docker 创建虚拟机时使用特定网段来解决： 1other_args=&quot;-bip=192.168.100.1/24&quot; 拉取镜像提示 Get https://index.docker.io/v1/repositories/library/hello-world/images: dial tcp 52.207.42.240:443: network is unreachable 这个肯定是网络问题了，公司的标准服务器是没有办法上外网的，系统环境变量中指定我自己的代理服务器居然也不管用，尝试了多种方法，目前问题还没解决 Docker 在 Ubuntu 16.04 上的安装由于 Docker 最早就是在 Ubuntu 上发展出来的，这里也记录下 Ubuntu 16.04 的安装方法 首先，安装 Docker 官方仓库的 GPG key 到系统中1curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 添加 Docker apt 源1sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; 然后，进行一下更新1sudo apt-get update 确认 Docker repo 可以安装1apt-cache policy docker-ce 如果看到下面的内容说明是 OK 的1234567Output of apt-cache policy docker-cedocker-ce: Installed: (none) Candidate: 18.06.1~ce~3-0~ubuntu Version table: 18.06.1~ce~3-0~ubuntu 500 500 https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages 安装 Docker1sudo apt-get install -y docker-ce 确认 Docker 是否已经安装1sudo systemctl status docker 类似下面的输出说明正确安装了 12345678● docker.service - Docker Application Container Engine Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2018-10-18 20:28:23 UTC; 35s ago Docs: https://docs.docker.com Main PID: 13412 (dockerd) CGroup: /system.slice/docker.service ├─13412 /usr/bin/dockerd -H fd:// └─13421 docker-containerd --config /var/run/docker/containerd/containerd.toml 另外，docker run 仍然是提示网络问题无法访问，跟 CentOS 一样无论如何加代理都不行1234# docker run hello-worldUnable to find image &apos;hello-world:latest&apos; locallydocker: Error response from daemon: Get https://registry-1.docker.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).See &apos;docker run --help&apos;. 最后，只能让 Docker Host 直接连接外网来解决这个问题。 使用执行 Docker 命令开始了解 Docker 命令，最简单的方法就是执行 Hello World 了 1$ docker run hello-world 成功后会看到如下的输出： 1234Hello from Docker!This message shows that your installation appears to be working correctly.... 运行一个 Docker 容器hello-world 这个镜像的作用是输出一段文本然后退出，每一个 Docker 容器其实都是一个有特定功能的应用，比如 ubuntu 这个镜像，就是一个 Ubuntu 虚拟机。 试着运行一个 123$ docker run -it -d ubuntu# -it 参数可以让我们交互式的 shell 进入容器 这个时候会输出一段字符串，这段字符串可以理解为 Docker 容器 ID 141b162b9dd3f4dc2b7d37bf195a2c4f09d38a05cf750cfbf07e90313da2a3995 这个时候，我们就可以进入这个容器内，去一看究竟了12345678$ docker exec -it 41b16 /bin/bashroot@41b162b9dd3f:/# ps -ef UID PID PPID C STIME TTY TIME CMDroot 1 0 0 07:09 pts/0 00:00:00 /bin/bashroot 10 0 0 07:11 pts/1 00:00:00 /bin/bashroot 21 10 0 07:13 pts/1 00:00:00 ps -ef 管理用一段时间的 Docker 之后，我们可能会有很多运行中的和非运行状态的容器，怎么去管理它们呢？ 查看 Docker 容器docker ps 命令可以让我们看到目前运行中的 Docker 容器情况 1$ docker ps 输出如下： 123456CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES41b162b9dd3f ubuntu &quot;/bin/bash&quot; 5 minutes ago Up 5 minutes zealous_murdock47651cfa1d8e golang &quot;bash&quot; 14 hours ago Up 14 hours optimistic_lederberg3b80522e5902 busybox &quot;sh&quot; 37 hours ago Up 37 hours zealous_darwin8b881720ceb8 redis &quot;docker-entrypoint.s…&quot; 37 hours ago Up 37 hours 0.0.0.0:6379-&gt;6379/tcp musing_noycef3f14f20b61f nginx &quot;nginx -g &apos;daemon of…&quot; 37 hours ago Up 37 hours 80/tcp zealous_blackburn 奇怪，我们刚才运行的 Hello World 没有在列表里，什么原因呢？ 其实 Hello World 属于非活动状态的镜像，只要给 docker ps 命令加上 -a 参数就可以看到了 12345678910111213141516$ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES41b162b9dd3f ubuntu &quot;/bin/bash&quot; 6 minutes ago Up 6 minutes zealous_murdock258796d0e4ed hello-world &quot;/hello&quot; 12 minutes ago Exited (0) 12 minutes ago trusting_swartz47651cfa1d8e golang &quot;bash&quot; 14 hours ago Up 14 hours optimistic_lederberg3b80522e5902 busybox &quot;sh&quot; 37 hours ago Up 37 hours zealous_darwin8b881720ceb8 redis &quot;docker-entrypoint.s…&quot; 37 hours ago Up 37 hours 0.0.0.0:6379-&gt;6379/tcp musing_noyce0a02170a956f hello-world &quot;/hello&quot; 37 hours ago Exited (0) 37 hours ago determined_mestorff3f14f20b61f nginx &quot;nginx -g &apos;daemon of…&quot; 37 hours ago Up 37 hours 80/tcp zealous_blackburnb43d4f2ba5ed ubuntu &quot;/bin/bash&quot; 37 hours ago Exited (0) 7 minutes ago unruffled_snyder66aa497d9767 ubuntu &quot;/bin/bash&quot; 37 hours ago Exited (0) 37 hours ago hungry_boyd126e0f019b19 ubuntu &quot;/bin/bash&quot; 37 hours ago Exited (0) 37 hours ago competent_goldwasser600adf161623 ubuntu &quot;/bin/bash&quot; 37 hours ago Exited (0) 37 hours ago upbeat_thompson3b5d4380392f ubuntu &quot;/bin/bash&quot; 37 hours ago Exited (0) 37 hours ago pedantic_euclid4fd577a1e8bf ubuntu &quot;/bin/bash&quot; 37 hours ago Exited (0) 37 hours ago upbeat_mcnulty 而如果使用 -l 参数，则可以看到最近创建的 Docker 容器 1234$ docker ps -lCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES41b162b9dd3f ubuntu &quot;/bin/bash&quot; 10 minutes ago Up 10 minutes zealous_murdock 关闭一个 Docker 容器我们在测试过程中运行了很多容器实例了，一些容器不需要再去使用了， 使用 docker stop 命令可以将活动状态的容器停止运行1$ docker stop 41b162b9dd3f 不仅可以使用 container ID 指定容器，还可以使用容器别名来操作123$ docker stop zealous_murdockzealous_murdock 停止运行的容器就可以关掉了，这里使用的命令是 docker rm 123# docker rm zealous_murdockzealous_murdock overlay2 代替 auFS 作为新的 Union File System 来使用","link":"/2019/03/03/docker-learn-memo-1/"}],"tags":[{"name":"movie","slug":"movie","link":"/tags/movie/"}],"categories":[{"name":"linux","slug":"linux","link":"/categories/linux/"},{"name":"iptables","slug":"linux/iptables","link":"/categories/linux/iptables/"},{"name":"web","slug":"linux/web","link":"/categories/linux/web/"},{"name":"nginx","slug":"nginx","link":"/categories/nginx/"},{"name":"web","slug":"web","link":"/categories/web/"},{"name":"Web","slug":"Web","link":"/categories/Web/"},{"name":"Docker","slug":"Docker","link":"/categories/Docker/"}]}